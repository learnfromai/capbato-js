{
  "info": {
    "name": "Clinic Management System API",
    "description": "Complete API collection for the Clinic Management System",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "General",
      "item": [
        {
          "name": "Welcome Message",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains welcome message\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Welcome to the Clinic Management System API!\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "API Status Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api",
              "host": ["{{baseUrl}}"],
              "path": ["api"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON\", function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test(\"Response contains API status message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('API is running!');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"doctor\",\n  \"username\": \"testdoctor{{$randomInt}}\",\n  \"password\": \"password123\",\n  \"fullName\": \"Dr. John Test\",\n  \"email\": \"testdoctor{{$randomInt}}@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Account created successfully');",
                  "});",
                  "",
                  "pm.test(\"Registration requires all fields\", function () {",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(requestBody).to.have.property('role');",
                  "    pm.expect(requestBody).to.have.property('username');",
                  "    pm.expect(requestBody).to.have.property('password');",
                  "    pm.expect(requestBody).to.have.property('fullName');",
                  "    pm.expect(requestBody).to.have.property('email');",
                  "});",
                  "",
                  "pm.test(\"Valid role values\", function () {",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(['admin', 'receptionist', 'doctor']).to.include(requestBody.role);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"anjeladepanes\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains login success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Login successful');",
                  "});",
                  "",
                  "pm.test(\"Response contains user role\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "    pm.expect(['admin', 'receptionist', 'doctor']).to.include(jsonData.role);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login with Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"nonexistentuser\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(['User not found', 'Invalid password']).to.include(jsonData.message);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each user has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const user = jsonData[0];",
                  "        pm.expect(user).to.have.property('id');",
                  "        pm.expect(user).to.have.property('full_name');",
                  "        pm.expect(user).to.have.property('role');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"full_name\": \"Jane Doe\",\n  \"username\": \"janedoe{{$randomInt}}\",\n  \"password\": \"password123\",\n  \"role\": \"receptionist\",\n  \"email\": \"jane.doe{{$randomInt}}@example.com\",\n  \"phone\": \"09123456789\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Account created.');",
                  "});",
                  "",
                  "pm.test(\"User creation requires all required fields\", function () {",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(requestBody).to.have.property('full_name');",
                  "    pm.expect(requestBody).to.have.property('username');",
                  "    pm.expect(requestBody).to.have.property('password');",
                  "    pm.expect(requestBody).to.have.property('role');",
                  "    pm.expect(requestBody).to.have.property('email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Change User Password",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:id/password",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id", "password"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Password updated.');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Patients",
      "item": [
        {
          "name": "Get All Patients",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/patients",
              "host": ["{{baseUrl}}"],
              "path": ["patients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each patient has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const patient = jsonData[0];",
                  "        pm.expect(patient).to.have.property('PatientID');",
                  "        pm.expect(patient).to.have.property('FirstName');",
                  "        pm.expect(patient).to.have.property('LastName');",
                  "        pm.expect(patient).to.have.property('date_of_birth');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Patient by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/patients/:id",
              "host": ["{{baseUrl}}"],
              "path": ["patients", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{testPatientId}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains complete patient details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('PatientID');",
                  "    pm.expect(jsonData).to.have.property('FirstName');",
                  "    pm.expect(jsonData).to.have.property('LastName');",
                  "    pm.expect(jsonData).to.have.property('MiddleName');",
                  "    pm.expect(jsonData).to.have.property('DateOfBirth');",
                  "    pm.expect(jsonData).to.have.property('Age');",
                  "    pm.expect(jsonData).to.have.property('Gender');",
                  "    pm.expect(jsonData).to.have.property('ContactNumber');",
                  "    pm.expect(jsonData).to.have.property('Address');",
                  "    pm.expect(jsonData).to.have.property('GuardianName');",
                  "    pm.expect(jsonData).to.have.property('GuardianGender');",
                  "    pm.expect(jsonData).to.have.property('GuardianRelationship');",
                  "    pm.expect(jsonData).to.have.property('GuardianContactNumber');",
                  "    pm.expect(jsonData).to.have.property('GuardianAddress');",
                  "});",
                  "",
                  "pm.test(\"Text fields are uppercase\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.FirstName) {",
                  "        pm.expect(jsonData.FirstName).to.equal(jsonData.FirstName.toUpperCase());",
                  "    }",
                  "    if (jsonData.LastName) {",
                  "        pm.expect(jsonData.LastName).to.equal(jsonData.LastName.toUpperCase());",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Search Patients",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/patients/search?name=john",
              "host": ["{{baseUrl}}"],
              "path": ["patients", "search"],
              "query": [
                {
                  "key": "name",
                  "value": "john"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each result has required search fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const patient = jsonData[0];",
                  "        pm.expect(patient).to.have.property('id');",
                  "        pm.expect(patient).to.have.property('name');",
                  "        pm.expect(patient).to.have.property('age');",
                  "        pm.expect(patient).to.have.property('gender');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Search results are limited to 10\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.length).to.be.at.most(10);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Total Patients",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/patients/total",
              "host": ["{{baseUrl}}"],
              "path": ["patients", "total"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains total count\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData.total).to.be.a('number');",
                  "    pm.expect(jsonData.total).to.be.at.least(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Patient",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"lastname\": \"Patient\",\n  \"firstname\": \"John\",\n  \"middlename\": \"Middle\",\n  \"dob\": \"1990-01-01\",\n  \"age\": 35,\n  \"gender\": \"male\",\n  \"contact\": \"09123456789\",\n  \"address\": \"123 Main St, City, State\",\n  \"guardian_name\": \"Jane Patient\",\n  \"guardian_gender\": \"female\",\n  \"guardian_relationship\": \"Spouse\",\n  \"guardian_contact\": \"09987654321\",\n  \"guardian_address\": \"123 Main St, City, State\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/patients/add-patient",
              "host": ["{{baseUrl}}"],
              "path": ["patients", "add-patient"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Patient added successfully');",
                  "});",
                  "",
                  "pm.test(\"Response contains patient ID with year prefix\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('patient_id');",
                  "    const currentYear = new Date().getFullYear();",
                  "    pm.expect(jsonData.patient_id).to.match(new RegExp(`^${currentYear}-[A-Z]\\\\d+$`));",
                  "    // Store the patient ID for use in other tests",
                  "    pm.globals.set('testPatientId', jsonData.patient_id);",
                  "});",
                  "",
                  "pm.test(\"Patient ID starts with current year and lastname first letter\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const patientId = jsonData.patient_id;",
                  "    const currentYear = new Date().getFullYear();",
                  "    pm.expect(patientId).to.include(`${currentYear}-P`); // P for Patient lastname",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Appointments",
      "item": [
        {
          "name": "Get All Appointments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/appointments",
              "host": ["{{baseUrl}}"],
              "path": ["appointments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each appointment has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const appointment = jsonData[0];",
                  "        pm.expect(appointment).to.have.property('id');",
                  "        pm.expect(appointment).to.have.property('patient_id');",
                  "        pm.expect(appointment).to.have.property('patient_name');",
                  "        pm.expect(appointment).to.have.property('appointment_date');",
                  "        pm.expect(appointment).to.have.property('appointment_time');",
                  "        pm.expect(appointment).to.have.property('status');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Appointment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patient_id\": \"{{testPatientId}}\",\n  \"patient_name\": \"PATIENT, JOHN MIDDLE\",\n  \"reason_for_visit\": \"Regular checkup\",\n  \"appointment_date\": \"2025-07-10\",\n  \"appointment_time\": \"10:00:00\",\n  \"doctor_name\": \"Dr. John Doe\",\n  \"status\": \"Confirmed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/appointments/add",
              "host": ["{{baseUrl}}"],
              "path": ["appointments", "add"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Appointment added successfully');",
                  "});",
                  "",
                  "pm.test(\"Response contains appointment ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    // Store the appointment ID for use in other tests",
                  "    pm.globals.set('testAppointmentId', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Validates future appointment date\", function () {",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    const appointmentDateTime = new Date(`${requestBody.appointment_date}T${requestBody.appointment_time}`);",
                  "    const now = new Date();",
                  "    pm.expect(appointmentDateTime.getTime()).to.be.greaterThan(now.getTime());",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Appointment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patient_id\": \"{{testPatientId}}\",\n  \"patient_name\": \"PATIENT, JOHN MIDDLE\",\n  \"reason_for_visit\": \"Follow-up checkup\",\n  \"appointment_date\": \"2025-07-11\",\n  \"appointment_time\": \"11:00:00\",\n  \"status\": \"Confirmed\",\n  \"doctor_name\": \"Dr. Jane Smith\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/appointments/update/{{testAppointmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["appointments", "update", "{{testAppointmentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Appointment updated successfully');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Cancel Appointment",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/appointments/cancel/{{testAppointmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["appointments", "cancel", "{{testAppointmentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Appointment cancelled successfully');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Today's Appointments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/appointments/today",
              "host": ["{{baseUrl}}"],
              "path": ["appointments", "today"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Today's appointments have correct date\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const today = new Date().toISOString().split('T')[0];",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(appointment => {",
                  "            pm.expect(appointment.appointment_date).to.equal(today);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Today's Confirmed Appointments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/appointments/today/confirmed",
              "host": ["{{baseUrl}}"],
              "path": ["appointments", "today", "confirmed"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All appointments are confirmed and today\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const today = new Date().toISOString().split('T')[0];",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(appointment => {",
                  "            pm.expect(appointment.status).to.equal('Confirmed');",
                  "            pm.expect(appointment.appointment_date).to.equal(today);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Appointments by Patient ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/appointments/patient/{{testPatientId}}",
              "host": ["{{baseUrl}}"],
              "path": ["appointments", "patient", "{{testPatientId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Appointments contain required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const appointment = jsonData[0];",
                  "        pm.expect(appointment).to.have.property('id');",
                  "        pm.expect(appointment).to.have.property('reason_for_visit');",
                  "        pm.expect(appointment).to.have.property('appointment_date');",
                  "        pm.expect(appointment).to.have.property('appointment_time');",
                  "        pm.expect(appointment).to.have.property('status');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Results are sorted by date descending\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 1) {",
                  "        for (let i = 0; i < jsonData.length - 1; i++) {",
                  "            const current = new Date(jsonData[i].appointment_date);",
                  "            const next = new Date(jsonData[i + 1].appointment_date);",
                  "            pm.expect(current.getTime()).to.be.at.least(next.getTime());",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Weekly Appointment Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/appointments/weekly-summary",
              "host": ["{{baseUrl}}"],
              "path": ["appointments", "weekly-summary"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains weekly summary data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    // Weekly summary should contain aggregated data",
                  "    pm.expect(jsonData).to.satisfy(function(obj) {",
                  "        return typeof obj === 'object' && obj !== null;",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Doctors",
      "item": [
        {
          "name": "Get All Doctors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/doctors",
              "host": ["{{baseUrl}}"],
              "path": ["doctors"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each doctor has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const doctor = jsonData[0];",
                  "        pm.expect(doctor).to.have.property('DoctorID');",
                  "        pm.expect(doctor).to.have.property('FirstName');",
                  "        pm.expect(doctor).to.have.property('LastName');",
                  "        pm.expect(doctor).to.have.property('Specialization');",
                  "        pm.expect(doctor).to.have.property('ContactNumber');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Schedules",
      "item": [
        {
          "name": "Get All Schedules",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/schedules",
              "host": ["{{baseUrl}}"],
              "path": ["schedules"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each schedule has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const schedule = jsonData[0];",
                  "        pm.expect(schedule).to.have.property('id');",
                  "        pm.expect(schedule).to.have.property('doctor_name');",
                  "        pm.expect(schedule).to.have.property('date');",
                  "        pm.expect(schedule).to.have.property('time');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Schedule",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctor_id\": 1,\n  \"day_of_week\": \"Monday\",\n  \"start_time\": \"09:00:00\",\n  \"end_time\": \"17:00:00\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/schedules",
              "host": ["{{baseUrl}}"],
              "path": ["schedules"]
            }
          }
        },
        {
          "name": "Update Schedule",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctor_id\": 1,\n  \"day_of_week\": \"Tuesday\",\n  \"start_time\": \"08:00:00\",\n  \"end_time\": \"16:00:00\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/schedules/:id",
              "host": ["{{baseUrl}}"],
              "path": ["schedules", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            }
          }
        },
        {
          "name": "Delete Schedule",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/schedules/:id",
              "host": ["{{baseUrl}}"],
              "path": ["schedules", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            }
          }
        },
        {
          "name": "Get Doctor for Today",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/schedules/today",
              "host": ["{{baseUrl}}"],
              "path": ["schedules", "today"]
            }
          }
        }
      ]
    },
    {
      "name": "Schedules",
      "item": [
        {
          "name": "Get All Schedules",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/schedules",
              "host": ["{{baseUrl}}"],
              "path": ["schedules"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each schedule has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const schedule = jsonData[0];",
                  "        pm.expect(schedule).to.have.property('id');",
                  "        pm.expect(schedule).to.have.property('doctor_name');",
                  "        pm.expect(schedule).to.have.property('date');",
                  "        pm.expect(schedule).to.have.property('time');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Schedules are sorted by date\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 1) {",
                  "        for (let i = 0; i < jsonData.length - 1; i++) {",
                  "            const currentDate = new Date(jsonData[i].date);",
                  "            const nextDate = new Date(jsonData[i + 1].date);",
                  "            pm.expect(currentDate.getTime()).to.be.at.most(nextDate.getTime());",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Schedule",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctor\": \"Dr. John Smith\",\n  \"date\": \"2025-07-10\",\n  \"time\": \"9AM-5PM\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/schedules",
              "host": ["{{baseUrl}}"],
              "path": ["schedules"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message and ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Schedule added');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    // Store the schedule ID for use in other tests",
                  "    pm.globals.set('testScheduleId', jsonData.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Schedule",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doctor\": \"Dr. Jane Smith\",\n  \"date\": \"2025-07-11\",\n  \"time\": \"8AM-4PM\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/schedules/{{testScheduleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["schedules", "{{testScheduleId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Schedule updated');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Doctor for Today",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/schedules/today",
              "host": ["{{baseUrl}}"],
              "path": ["schedules", "today"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains doctor info or N/A\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('doctor_name');",
                  "    pm.expect(typeof jsonData.doctor_name).to.equal('string');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Schedule",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/schedules/{{testScheduleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["schedules", "{{testScheduleId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Schedule deleted');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Handling & Validation",
      "item": [
        {
          "name": "Test Invalid Patient ID Format",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/patients/invalid-id",
              "host": ["{{baseUrl}}"],
              "path": ["patients", "invalid-id"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Returns 404 for invalid patient ID\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response contains proper message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.equal('Patient not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Invalid Phone Number Format",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"lastname\": \"Test\",\n  \"firstname\": \"Patient\",\n  \"middlename\": \"Middle\",\n  \"dob\": \"1990-01-01\",\n  \"age\": 35,\n  \"gender\": \"male\",\n  \"contact\": \"123456789\",\n  \"address\": \"123 Main St\",\n  \"guardian_name\": \"Guardian Name\",\n  \"guardian_gender\": \"female\",\n  \"guardian_relationship\": \"Spouse\",\n  \"guardian_contact\": \"987654321\",\n  \"guardian_address\": \"123 Main St\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/patients/add-patient",
              "host": ["{{baseUrl}}"],
              "path": ["patients", "add-patient"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Returns 400 for invalid phone format\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response contains phone validation message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.equal('Invalid contact number format');",
                  "    pm.expect(jsonData).to.have.property('details');",
                  "    pm.expect(jsonData.details).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Past Appointment Date",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patient_id\": \"{{testPatientId}}\",\n  \"patient_name\": \"Test Patient\",\n  \"reason_for_visit\": \"Test appointment\",\n  \"appointment_date\": \"2020-01-01\",\n  \"appointment_time\": \"10:00:00\",\n  \"doctor_name\": \"Dr. Test\",\n  \"status\": \"Confirmed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/appointments/add",
              "host": ["{{baseUrl}}"],
              "path": ["appointments", "add"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Returns 400 for past appointment date\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response contains past date message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.equal('Cannot book a past time slot.');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Missing Required Fields - Patient",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"John\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/patients/add-patient",
              "host": ["{{baseUrl}}"],
              "path": ["patients", "add-patient"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Returns 500 for missing required fields\", function () {",
                  "    pm.response.to.have.status(500);",
                  "});",
                  "",
                  "pm.test(\"Error response contains database error info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.equal('Failed to add patient');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Laboratory",
      "item": [
        {
          "name": "Save Blood Chemistry Results",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patient_name\": \"PATIENT, JOHN MIDDLE\",\n  \"age\": 35,\n  \"sex\": \"MALE\",\n  \"date_taken\": \"2025-07-04\",\n  \"fbs\": \"90\",\n  \"bun\": \"15\",\n  \"creatinine\": \"1.0\",\n  \"uric_acid\": \"5.5\",\n  \"cholesterol\": \"180\",\n  \"triglycerides\": \"120\",\n  \"hdl\": \"45\",\n  \"ldl\": \"110\",\n  \"vldl\": \"24\",\n  \"sodium\": \"140\",\n  \"potassium\": \"4.0\",\n  \"chloride\": \"100\",\n  \"calcium\": \"9.5\",\n  \"sgot\": \"25\",\n  \"sgpt\": \"30\",\n  \"rbs\": \"95\",\n  \"alk_phosphatase\": \"85\",\n  \"total_protein\": \"7.2\",\n  \"albumin\": \"4.0\",\n  \"globulin\": \"3.2\",\n  \"ag_ratio\": \"1.25\",\n  \"total_bilirubin\": \"1.0\",\n  \"direct_bilirubin\": \"0.3\",\n  \"indirect_bilirubin\": \"0.7\",\n  \"ionised_calcium\": \"1.25\",\n  \"magnesium\": \"2.0\",\n  \"hbalc\": \"5.8\",\n  \"ogtt_30min\": \"140\",\n  \"ogtt_1hr\": \"180\",\n  \"ogtt_2hr\": \"120\",\n  \"ppbs_2hr\": \"115\",\n  \"inor_phosphorus\": \"3.5\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/blood_chem",
              "host": ["{{baseUrl}}"],
              "path": ["api", "blood_chem"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Blood chemistry results inserted.');",
                  "});",
                  "",
                  "pm.test(\"All blood chemistry fields are properly structured\", function () {",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(requestBody).to.have.property('patient_name');",
                  "    pm.expect(requestBody).to.have.property('age');",
                  "    pm.expect(requestBody).to.have.property('sex');",
                  "    pm.expect(requestBody).to.have.property('date_taken');",
                  "    pm.expect(requestBody).to.have.property('fbs');",
                  "    pm.expect(requestBody).to.have.property('cholesterol');",
                  "    pm.expect(requestBody).to.have.property('triglycerides');",
                  "    pm.expect(requestBody).to.have.property('hdl');",
                  "    pm.expect(requestBody).to.have.property('ldl');",
                  "    pm.expect(requestBody).to.have.property('creatinine');",
                  "    pm.expect(requestBody).to.have.property('bun');",
                  "    pm.expect(requestBody).to.have.property('sgot');",
                  "    pm.expect(requestBody).to.have.property('sgpt');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Save Lab Request Form",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patient_id\": \"{{testPatientId}}\",\n  \"patient_name\": \"PATIENT, JOHN MIDDLE\",\n  \"age_gender\": \"35 / MALE\",\n  \"request_date\": \"2025-07-04\",\n  \"cbc_with_platelet\": \"yes\",\n  \"pregnancy_test\": \"no\",\n  \"urinalysis\": \"yes\",\n  \"fecalysis\": \"no\",\n  \"occult_blood_test\": \"no\",\n  \"hepa_b_screening\": \"yes\",\n  \"hepa_a_screening\": \"no\",\n  \"hepatitis_profile\": \"no\",\n  \"vdrl_rpr\": \"no\",\n  \"dengue_ns1\": \"no\",\n  \"ca_125_cea_psa\": \"no\",\n  \"fbs\": \"yes\",\n  \"bun\": \"yes\",\n  \"creatinine\": \"yes\",\n  \"blood_uric_acid\": \"no\",\n  \"lipid_profile\": \"yes\",\n  \"sgot\": \"yes\",\n  \"sgpt\": \"yes\",\n  \"alp\": \"no\",\n  \"sodium_na\": \"no\",\n  \"potassium_k\": \"no\",\n  \"hbalc\": \"no\",\n  \"ecg\": \"no\",\n  \"t3\": \"no\",\n  \"t4\": \"no\",\n  \"ft3\": \"no\",\n  \"ft4\": \"no\",\n  \"tsh\": \"no\",\n  \"others\": \"Routine health checkup\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/lab_requests",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lab_requests"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Lab request submitted successfully');",
                  "});",
                  "",
                  "pm.test(\"Lab request has valid checkbox values\", function () {",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    const checkboxFields = ['cbc_with_platelet', 'pregnancy_test', 'urinalysis', 'fecalysis', 'fbs', 'bun', 'creatinine'];",
                  "    checkboxFields.forEach(field => {",
                  "        if (requestBody[field]) {",
                  "            pm.expect(['yes', 'no', '']).to.include(requestBody[field]);",
                  "        }",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Lab Requests",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/lab_requests",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lab_requests"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each lab request has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const labRequest = jsonData[0];",
                  "        pm.expect(labRequest).to.have.property('patient_id');",
                  "        pm.expect(labRequest).to.have.property('id');",
                  "        pm.expect(labRequest).to.have.property('patient_name');",
                  "        pm.expect(labRequest).to.have.property('date');",
                  "        pm.expect(labRequest).to.have.property('test_name');",
                  "        pm.expect(labRequest).to.have.property('status');",
                  "        pm.expect(labRequest.test_name).to.equal('Lab Request');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Lab Request by Patient ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/lab_requests/{{testPatientId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lab_requests", "{{testPatientId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains lab request data\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.be.an('object');",
                  "        pm.expect(jsonData).to.have.property('patient_id');",
                  "        pm.expect(jsonData).to.have.property('patient_name');",
                  "        pm.expect(jsonData).to.have.property('request_date');",
                  "    });",
                  "",
                  "    pm.test(\"Returns most recent lab request\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData.id).to.be.a('number');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test(\"No lab request found message\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('error');",
                  "        pm.expect(jsonData.error).to.equal('Not found');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Lab Request Results",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fbs\": \"Normal\",\n  \"bun\": \"Normal\",\n  \"creatinine\": \"Normal\",\n  \"lipid_profile\": \"Normal\",\n  \"sgot\": \"Normal\",\n  \"sgpt\": \"Normal\",\n  \"status\": \"Complete\",\n  \"date_taken\": \"2025-07-04\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/lab_requests/{{testPatientId}}/2025-07-04",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lab_requests", "{{testPatientId}}", "2025-07-04"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Lab results updated successfully.');",
                  "});",
                  "",
                  "pm.test(\"Update contains valid lab result fields\", function () {",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    const allowedFields = ['fbs', 'bun', 'creatinine', 'blood_uric_acid', 'lipid_profile', 'sgot', 'sgpt', 'alp', 'sodium_na', 'potassium_k', 'hbalc', 'ecg', 't3', 't4', 'ft3', 'ft4', 'tsh', 'status', 'date_taken'];",
                  "    Object.keys(requestBody).forEach(key => {",
                  "        pm.expect(allowedFields).to.include(key);",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Address",
      "description": "Philippine address selection endpoints for cascading dropdowns",
      "item": [
        {
          "name": "Get All Provinces",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/address/provinces",
              "host": ["{{baseUrl}}"],
              "path": ["address", "provinces"]
            },
            "description": "Get all Philippine provinces/regions for address selection"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Provinces have required properties\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.length).to.be.greaterThan(0);",
                  "    ",
                  "    const firstProvince = responseJson[0];",
                  "    pm.expect(firstProvince).to.have.property('code');",
                  "    pm.expect(firstProvince).to.have.property('name');",
                  "    pm.expect(firstProvince.code).to.be.a('string');",
                  "    pm.expect(firstProvince.name).to.be.a('string');",
                  "});",
                  "",
                  "pm.test(\"Contains expected provinces\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    const provinceNames = responseJson.map(p => p.name);",
                  "    ",
                  "    // Check for some well-known provinces",
                  "    pm.expect(provinceNames).to.include('ABRA');",
                  "    pm.expect(provinceNames).to.include('BATAAN');",
                  "    pm.expect(provinceNames).to.include('CEBU');",
                  "});",
                  "",
                  "pm.test(\"Has comprehensive coverage (80+ provinces)\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.length).to.be.at.least(80);",
                  "});",
                  "",
                  "// Store first province for next tests",
                  "if (pm.response.code === 200) {",
                  "    const provinces = pm.response.json();",
                  "    if (provinces.length > 0) {",
                  "        pm.globals.set('testProvinceCode', provinces[0].code);",
                  "        pm.globals.set('testProvinceName', provinces[0].name);",
                  "        console.log('Set test province:', provinces[0].name, '(' + provinces[0].code + ')');",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Cities by Province",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/address/cities/{{testProvinceCode}}",
              "host": ["{{baseUrl}}"],
              "path": ["address", "cities", "{{testProvinceCode}}"]
            },
            "description": "Get all cities/municipalities for a specific province"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set default province if not set",
                  "if (!pm.globals.get('testProvinceCode')) {",
                  "    pm.globals.set('testProvinceCode', 'ABRA');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Cities have required properties\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    if (responseJson.length > 0) {",
                  "        const firstCity = responseJson[0];",
                  "        pm.expect(firstCity).to.have.property('code');",
                  "        pm.expect(firstCity).to.have.property('name');",
                  "        pm.expect(firstCity.code).to.be.a('string');",
                  "        pm.expect(firstCity.name).to.be.a('string');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Cities are for the requested province\", function () {",
                  "    const requestedProvince = pm.globals.get('testProvinceCode');",
                  "    console.log('Testing cities for province:', requestedProvince);",
                  "    ",
                  "    // This test verifies the API returns results for the province",
                  "    // The actual validation of correct province filtering is implicit",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test(\"City codes are properly formatted\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    responseJson.forEach(function(city) {",
                  "        // City codes should be lowercase with underscores",
                  "        pm.expect(city.code).to.match(/^[a-z_]+$/);",
                  "    });",
                  "});",
                  "",
                  "// Store first city for next tests",
                  "if (pm.response.code === 200) {",
                  "    const cities = pm.response.json();",
                  "    if (cities.length > 0) {",
                  "        pm.globals.set('testCityCode', cities[0].code);",
                  "        pm.globals.set('testCityName', cities[0].name);",
                  "        console.log('Set test city:', cities[0].name, '(' + cities[0].code + ')');",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Barangays by City",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/address/barangays/{{testCityCode}}",
              "host": ["{{baseUrl}}"],
              "path": ["address", "barangays", "{{testCityCode}}"]
            },
            "description": "Get all barangays for a specific city/municipality"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set default city if not set",
                  "if (!pm.globals.get('testCityCode')) {",
                  "    pm.globals.set('testCityCode', 'bangued');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Barangays have required properties\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.length).to.be.greaterThan(0);",
                  "    ",
                  "    const firstBarangay = responseJson[0];",
                  "    pm.expect(firstBarangay).to.have.property('code');",
                  "    pm.expect(firstBarangay).to.have.property('name');",
                  "    pm.expect(firstBarangay.code).to.be.a('string');",
                  "    pm.expect(firstBarangay.name).to.be.a('string');",
                  "});",
                  "",
                  "pm.test(\"Barangay codes follow format\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    responseJson.forEach(function(barangay) {",
                  "        // Barangay codes should follow B### pattern",
                  "        pm.expect(barangay.code).to.match(/^B\\d{3}$/);",
                  "    });",
                  "});",
                  "",
                  "pm.test(\"Barangays are for the requested city\", function () {",
                  "    const requestedCity = pm.globals.get('testCityCode');",
                  "    console.log('Testing barangays for city:', requestedCity);",
                  "    ",
                  "    // This test verifies the API returns results for the city",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test(\"Has comprehensive barangay data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    // Most cities should have multiple barangays",
                  "    pm.expect(responseJson.length).to.be.at.least(1);",
                  "});",
                  "",
                  "// Store first barangay for reference",
                  "if (pm.response.code === 200) {",
                  "    const barangays = pm.response.json();",
                  "    if (barangays.length > 0) {",
                  "        pm.globals.set('testBarangayCode', barangays[0].code);",
                  "        pm.globals.set('testBarangayName', barangays[0].name);",
                  "        console.log('Set test barangay:', barangays[0].name, '(' + barangays[0].code + ')');",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Metro Manila Cities",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/address/cities/NATIONAL_CAPITAL_REGION_-_MANILA",
              "host": ["{{baseUrl}}"],
              "path": ["address", "cities", "NATIONAL_CAPITAL_REGION_-_MANILA"]
            },
            "description": "Test getting Metro Manila cities to verify NCR data"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Contains Manila districts\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    const cityNames = responseJson.map(c => c.name);",
                  "    ",
                  "    // Check for some Manila districts",
                  "    pm.expect(cityNames).to.include('BINONDO');",
                  "    pm.expect(cityNames).to.include('ERMITA');",
                  "    pm.expect(cityNames).to.include('MALATE');",
                  "});",
                  "",
                  "pm.test(\"Has multiple Manila districts\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.length).to.be.at.least(10);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Cascading Flow",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/address/barangays/binondo",
              "host": ["{{baseUrl}}"],
              "path": ["address", "barangays", "binondo"]
            },
            "description": "Test complete cascading flow: Province → City → Barangay"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Binondo has barangays\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test(\"Binondo barangays have numbered names\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    const hasNumberedBarangays = responseJson.some(b => ",
                  "        b.name.includes('BARANGAY') && /\\d+/.test(b.name)",
                  "    );",
                  "    pm.expect(hasNumberedBarangays).to.be.true;",
                  "});",
                  "",
                  "// Summary test results",
                  "console.log('Complete cascading flow test passed!');",
                  "console.log('Province: NATIONAL CAPITAL REGION - MANILA');",
                  "console.log('City: BINONDO');",
                  "console.log('Barangays found:', pm.response.json().length);"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Error Handling - Invalid Province",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/address/cities/INVALID_PROVINCE",
              "host": ["{{baseUrl}}"],
              "path": ["address", "cities", "INVALID_PROVINCE"]
            },
            "description": "Test error handling for invalid province code"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 (empty array for invalid province)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Returns empty array for invalid province\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    pm.expect(responseJson.length).to.equal(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Error Handling - Invalid City",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/address/barangays/invalid_city",
              "host": ["{{baseUrl}}"],
              "path": ["address", "barangays", "invalid_city"]
            },
            "description": "Test error handling for invalid city code"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 (empty array for invalid city)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Returns empty array for invalid city\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    pm.expect(responseJson.length).to.equal(0);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default values for global variables if they don't exist",
          "if (!pm.globals.get('testPatientId')) {",
          "    pm.globals.set('testPatientId', '2025-A1'); // Default to current year format",
          "}",
          "",
          "if (!pm.globals.get('testAppointmentId')) {",
          "    pm.globals.set('testAppointmentId', '1'); // Default appointment ID",
          "}",
          "",
          "if (!pm.globals.get('testScheduleId')) {",
          "    pm.globals.set('testScheduleId', '1'); // Default schedule ID",
          "}",
          "",
          "// Log current test being run",
          "console.log('Running: ' + pm.info.requestName);",
          "",
          "// Set current year for use in tests",
          "pm.globals.set('currentYear', new Date().getFullYear().toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script that runs after each request",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Verify Content-Type for JSON responses",
          "if (pm.response.code !== 404 && pm.response.headers.get('Content-Type')) {",
          "    pm.test('Response Content-Type is JSON', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}",
          "",
          "// Log response status for debugging",
          "console.log('Response Status:', pm.response.status, pm.response.code);",
          "",
          "// Log any validation errors",
          "if (pm.response.code >= 400) {",
          "    console.log('Error Response:', pm.response.text());",
          "}"
        ]
      }
    }
  ]
}
