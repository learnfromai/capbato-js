{
  "info": {
    "name": "Capbato Clinic Management API - Comprehensive",
    "description": "Complete API collection for the Capbato Clinic Management System with Clean Architecture. This collection includes comprehensive test scenarios for authentication, patient management, user management, and todos with happy paths, validation errors, and edge cases.\n\n## API Coverage\n\n### Authentication (/api/auth)\n- User registration with role-based access\n- User login with email/username support\n- JWT token management\n\n### Patient Management (/api/patients)\n- Patient CRUD operations\n- Patient statistics and reporting\n- Structured address management\n- Guardian information handling\n\n### User Management (/api/users)\n- User listing and management\n- Password change functionality\n- Role-based operations\n\n### Todo Management (/api/todos)\n- Complete todo CRUD operations\n- Todo filtering and statistics\n- Priority and completion management\n\n## Testing Strategy\n\nThis collection follows comprehensive testing best practices:\n- **Happy Path Testing**: Core functionality validation\n- **Error Handling**: Validation errors, authentication failures, not found scenarios\n- **Schema Validation**: Response structure verification\n- **Dynamic Data**: Variable management for realistic test flows\n- **Performance Testing**: Response time validations\n- **Security Testing**: Authentication and authorization flows",
    "version": "2.1.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000",
      "type": "string",
      "description": "Base URL for the Capbato API server"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token from login operations"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string",
      "description": "Dynamic user ID for testing"
    },
    {
      "key": "testPatientId",
      "value": "",
      "type": "string", 
      "description": "Dynamic patient ID for testing"
    },
    {
      "key": "todoId",
      "value": "",
      "type": "string",
      "description": "Dynamic todo ID for testing"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string",
      "description": "Dynamic test email for registration tests"
    },
    {
      "key": "loginTestEmail",
      "value": "test.admin@clinic.com",
      "type": "string",
      "description": "Fixed email for login testing"
    },
    {
      "key": "loginTestPassword",
      "value": "AdminPass123",
      "type": "string",
      "description": "Fixed password for login testing"
    }
  ],
  "item": [
    {
      "name": "Server Health & Info",
      "description": "Basic server information and health check endpoints",
      "item": [
        {
          "name": "Get Server Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('version');",
                  "    pm.expect(responseJson).to.have.property('environment');",
                  "    pm.expect(responseJson).to.have.property('database');",
                  "    pm.expect(responseJson).to.have.property('endpoints');",
                  "});",
                  "",
                  "pm.test('Database type is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.database).to.be.oneOf(['mysql', 'memory', 'sqlite', 'postgres']);",
                  "});",
                  "",
                  "pm.test('Endpoints object contains API routes', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.endpoints).to.have.property('health');",
                  "    pm.expect(responseJson.endpoints).to.have.property('todos');",
                  "    // Check for patient and user endpoints if they exist",
                  "    if (responseJson.endpoints.patients) {",
                  "        pm.expect(responseJson.endpoints.patients).to.be.a('string');",
                  "    }",
                  "    if (responseJson.endpoints.users) {",
                  "        pm.expect(responseJson.endpoints.users).to.be.a('string');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"]
            },
            "description": "Get basic server information including version, environment, and available endpoints"
          }
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Timestamp is valid ISO string', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Health check endpoint to verify server is running"
          }
        }
      ]
    },
    {
      "name": "Authentication",
      "description": "User authentication and registration with comprehensive validation scenarios",
      "item": [
        {
          "name": "Register User - Admin Setup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created user has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data;",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('firstName', 'Admin');",
                  "    pm.expect(user).to.have.property('lastName', 'User');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('username');",
                  "    pm.expect(user).to.have.property('role', 'admin');",
                  "    pm.expect(user).to.have.property('mobile');",
                  "    pm.expect(user).to.have.property('createdAt');",
                  "});",
                  "",
                  "pm.test('User ID is generated and stored', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data;",
                  "    pm.expect(user.id).to.be.a('string');",
                  "    pm.expect(user.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('testUserId', user.id);",
                  "    pm.collectionVariables.set('testEmail', user.email);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"email\": \"{{loginTestEmail}}\",\n  \"password\": \"{{loginTestPassword}}\",\n  \"role\": \"admin\",\n  \"mobile\": \"+639123456789\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register admin user for testing other endpoints that may require authentication"
          }
        },
        {
          "name": "Login User - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Login response has authentication data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const data = responseJson.data;",
                  "    pm.expect(data).to.have.property('token');",
                  "    pm.expect(data).to.have.property('user');",
                  "    pm.expect(data.token).to.be.a('string');",
                  "    pm.expect(data.token).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('JWT token is valid format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const token = responseJson.data.token;",
                  "    const tokenParts = token.split('.');",
                  "    pm.expect(tokenParts).to.have.length(3);",
                  "    pm.expect(tokenParts[0]).to.have.length.above(0);",
                  "    pm.expect(tokenParts[1]).to.have.length.above(0);",
                  "    pm.expect(tokenParts[2]).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('Store auth token for future requests', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const token = responseJson.data.token;",
                  "    pm.collectionVariables.set('authToken', token);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginTestEmail}}\",\n  \"password\": \"{{loginTestPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with valid email and password - should return JWT token and user data"
          }
        },
        {
          "name": "Register User - Doctor Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Created user has doctor role', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data;",
                  "    pm.expect(user).to.have.property('role', 'doctor');",
                  "    pm.expect(user).to.have.property('firstName', 'Dr. Jane');",
                  "    pm.expect(user).to.have.property('lastName', 'Smith');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Dr. Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"doctor.{{$randomInt}}@clinic.com\",\n  \"password\": \"DoctorPass123\",\n  \"role\": \"doctor\",\n  \"mobile\": \"+639987654321\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a doctor user to test role-based functionality"
          }
        },
        {
          "name": "Register User - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.equal('VALIDATION_ERROR');",
                  "    pm.expect(responseJson.error).to.include('Validation failed');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"email\": \"incomplete@test.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test validation error when required fields are missing"
          }
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error indicates authentication failure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => ",
                  "        msg.includes('invalid') || ",
                  "        msg.includes('credentials') ||",
                  "        msg.includes('unauthorized')",
                  "    );",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@clinic.com\",\n  \"password\": \"WrongPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test authentication error with invalid credentials"
          }
        }
      ]
    },
    {
      "name": "Patient Management",
      "description": "Patient CRUD operations with comprehensive validation and error handling",
      "item": [
        {
          "name": "Get Patient Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Statistics data has valid structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats).to.have.property('total');",
                  "    pm.expect(stats.total).to.be.a('number');",
                  "    pm.expect(stats.total).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/total",
              "host": ["{{baseUrl}}"],
              "path": ["api", "patients", "total"]
            },
            "description": "Get patient statistics including total count"
          }
        },
        {
          "name": "Create Patient - Complete Information",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created patient has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('id');",
                  "    pm.expect(patient).to.have.property('firstName', 'Juan');",
                  "    pm.expect(patient).to.have.property('lastName', 'Dela Cruz');",
                  "    pm.expect(patient).to.have.property('middleName', 'Santos');",
                  "    pm.expect(patient).to.have.property('dateOfBirth');",
                  "    pm.expect(patient).to.have.property('gender', 'Male');",
                  "    pm.expect(patient).to.have.property('contactNumber');",
                  "    pm.expect(patient).to.have.property('createdAt');",
                  "    pm.expect(patient).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Address information is structured correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    // Check for structured address fields",
                  "    pm.expect(patient).to.have.property('houseNumber');",
                  "    pm.expect(patient).to.have.property('streetName');",
                  "    pm.expect(patient).to.have.property('barangay');",
                  "    pm.expect(patient).to.have.property('cityMunicipality');",
                  "    pm.expect(patient).to.have.property('province');",
                  "    // Check for computed address field for backward compatibility",
                  "    if (patient.address) {",
                  "        pm.expect(patient.address).to.be.a('string');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Guardian information is included', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('guardianName');",
                  "    pm.expect(patient).to.have.property('guardianGender');",
                  "    pm.expect(patient).to.have.property('guardianRelationship');",
                  "    pm.expect(patient).to.have.property('guardianContactNumber');",
                  "});",
                  "",
                  "pm.test('Patient ID is generated and stored', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient.id).to.be.a('string');",
                  "    pm.expect(patient.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('testPatientId', patient.id);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Juan\",\n  \"lastName\": \"Dela Cruz\",\n  \"middleName\": \"Santos\",\n  \"dateOfBirth\": \"1990-05-15\",\n  \"gender\": \"Male\",\n  \"contactNumber\": \"09171234567\",\n  \"houseNumber\": \"123\",\n  \"streetName\": \"Main Street\",\n  \"barangay\": \"Barangay Santo Niño\",\n  \"cityMunicipality\": \"Quezon City\",\n  \"province\": \"Metro Manila\",\n  \"guardianName\": \"Maria Dela Cruz\",\n  \"guardianGender\": \"Female\",\n  \"guardianRelationship\": \"Mother\",\n  \"guardianContactNumber\": \"09187654321\",\n  \"guardianHouseNumber\": \"123\",\n  \"guardianStreetName\": \"Main Street\",\n  \"guardianBarangay\": \"Barangay Santo Niño\",\n  \"guardianCityMunicipality\": \"Quezon City\",\n  \"guardianProvince\": \"Metro Manila\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": ["{{baseUrl}}"],
              "path": ["api", "patients"]
            },
            "description": "Create a new patient with complete information including guardian details"
          }
        },
        {
          "name": "Create Patient - Minimal Required Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Created patient has minimal required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('id');",
                  "    pm.expect(patient).to.have.property('firstName', 'Ana');",
                  "    pm.expect(patient).to.have.property('lastName', 'Garcia');",
                  "    pm.expect(patient).to.have.property('dateOfBirth');",
                  "    pm.expect(patient).to.have.property('gender', 'Female');",
                  "    pm.expect(patient).to.have.property('contactNumber');",
                  "});",
                  "",
                  "pm.test('Address fields are present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    // At least one address field should be present",
                  "    const hasAddressField = patient.houseNumber || patient.streetName || ",
                  "                           patient.barangay || patient.cityMunicipality || patient.province;",
                  "    pm.expect(hasAddressField).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Ana\",\n  \"lastName\": \"Garcia\",\n  \"dateOfBirth\": \"1985-12-25\",\n  \"gender\": \"Female\",\n  \"contactNumber\": \"09281234567\",\n  \"houseNumber\": \"456\",\n  \"streetName\": \"Oak Avenue\",\n  \"barangay\": \"Poblacion\",\n  \"cityMunicipality\": \"Makati City\",\n  \"province\": \"Metro Manila\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": ["{{baseUrl}}"],
              "path": ["api", "patients"]
            },
            "description": "Create a patient with minimal required data (no guardian information)"
          }
        },
        {
          "name": "Get All Patients",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Patient list items have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const patient = responseJson.data[0];",
                  "        pm.expect(patient).to.have.property('id');",
                  "        pm.expect(patient).to.have.property('fullName');",
                  "        pm.expect(patient).to.have.property('dateOfBirth');",
                  "        pm.expect(patient).to.have.property('gender');",
                  "        pm.expect(patient).to.have.property('contactNumber');",
                  "        pm.expect(patient).to.have.property('age');",
                  "        pm.expect(patient.age).to.be.a('number');",
                  "        pm.expect(patient.age).to.be.at.least(0);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": ["{{baseUrl}}"],
              "path": ["api", "patients"]
            },
            "description": "Retrieve all patients with list-optimized data structure"
          }
        },
        {
          "name": "Get Patient by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Patient has complete information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const patient = responseJson.data;",
                  "    pm.expect(patient).to.have.property('id');",
                  "    pm.expect(patient).to.have.property('firstName');",
                  "    pm.expect(patient).to.have.property('lastName');",
                  "    pm.expect(patient).to.have.property('dateOfBirth');",
                  "    pm.expect(patient).to.have.property('gender');",
                  "    pm.expect(patient).to.have.property('contactNumber');",
                  "    pm.expect(patient).to.have.property('age');",
                  "    pm.expect(patient).to.have.property('createdAt');",
                  "    pm.expect(patient).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/{{testPatientId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "patients", "{{testPatientId}}"]
            },
            "description": "Retrieve a specific patient by ID with complete information"
          }
        },
        {
          "name": "Get Patient by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404 or 500', function () {",
                  "    // Could be 404 for not found or 500 for invalid ID format",
                  "    pm.expect([404, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error message indicates not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => ",
                  "        msg.includes('not found') || msg.includes('invalid')",
                  "    );",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/patients/nonexistent-patient-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "patients", "nonexistent-patient-id"]
            },
            "description": "Test error handling when requesting a patient that doesn't exist"
          }
        },
        {
          "name": "Create Patient - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.equal('VALIDATION_ERROR');",
                  "    pm.expect(responseJson.error).to.include('Validation failed');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Incomplete\",\n  \"dateOfBirth\": \"1990-01-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/patients",
              "host": ["{{baseUrl}}"],
              "path": ["api", "patients"]
            },
            "description": "Test validation error when required patient fields are missing"
          }
        }
      ]
    },
    {
      "name": "User Management", 
      "description": "User management operations including listing users and password changes",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Users array contains valid user objects', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const user = responseJson.data[0];",
                  "        pm.expect(user).to.have.property('id');",
                  "        pm.expect(user).to.have.property('fullName');",
                  "        pm.expect(user).to.have.property('role');",
                  "        pm.expect(user).to.have.property('mobile');",
                  "        pm.expect(user.id).to.be.a('string');",
                  "        pm.expect(user.fullName).to.be.a('string');",
                  "        pm.expect(user.role).to.be.oneOf(['admin', 'doctor', 'receptionist']);",
                  "        // mobile can be string or null",
                  "        if (user.mobile !== null) {",
                  "            pm.expect(user.mobile).to.be.a('string');",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "pm.test('Test user is in the list', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const testUserId = pm.collectionVariables.get('testUserId');",
                  "    if (testUserId) {",
                  "        const testUser = responseJson.data.find(user => user.id === testUserId);",
                  "        pm.expect(testUser).to.exist;",
                  "        pm.expect(testUser.role).to.equal('admin');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            },
            "description": "Retrieve all users in the system with their basic information"
          }
        },
        {
          "name": "Change User Password - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('message', 'Password updated.');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"newPassword\": \"NewPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}/password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{testUserId}}", "password"]
            },
            "description": "Change password for a specific user by their ID"
          }
        },
        {
          "name": "Change Password - User Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 500', function () {",
                  "    // Could be 500 if user not found, or 400 if ID validation fails",
                  "    pm.expect([400, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error message indicates user not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error.toLowerCase()).to.include('not found');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"newPassword\": \"ValidPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/nonexistent-user-id/password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "nonexistent-user-id", "password"]
            },
            "description": "Test error handling when trying to change password for a non-existent user"
          }
        },
        {
          "name": "Change Password - Missing Password Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Error indicates missing password field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(function(msg) {",
                  "        return msg.includes('password') && (msg.includes('required') || msg.includes('missing'));",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"oldPassword\": \"SomePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUserId}}/password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{testUserId}}", "password"]
            },
            "description": "Test validation error when newPassword field is missing from request"
          }
        }
      ]
    },
    {
      "name": "Todo Management",
      "description": "Complete todo CRUD operations with filtering, statistics, and comprehensive validation",
      "item": [
        {
          "name": "Create Todo - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created todo has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title', 'Complete clinic management system documentation');",
                  "    pm.expect(todo).to.have.property('completed', false);",
                  "    pm.expect(todo).to.have.property('priority', 'high');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Todo ID is generated and stored', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.id).to.be.a('string');",
                  "    pm.expect(todo.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('todoId', todo.id);",
                  "});",
                  "",
                  "pm.test('Timestamps are valid ISO strings', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "    pm.expect(todo.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete clinic management system documentation\",\n  \"priority\": \"high\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Create a new todo with required fields"
          }
        },
        {
          "name": "Get All Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Todo items have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const todo = responseJson.data[0];",
                  "        pm.expect(todo).to.have.property('id');",
                  "        pm.expect(todo).to.have.property('title');",
                  "        pm.expect(todo).to.have.property('completed');",
                  "        pm.expect(todo).to.have.property('priority');",
                  "        pm.expect(todo).to.have.property('createdAt');",
                  "        pm.expect(todo).to.have.property('updatedAt');",
                  "        pm.expect(todo.completed).to.be.a('boolean');",
                  "        pm.expect(todo.priority).to.be.oneOf(['low', 'medium', 'high']);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Retrieve all todos regardless of completion status"
          }
        },
        {
          "name": "Get Todo by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Todo has complete information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title');",
                  "    pm.expect(todo).to.have.property('completed');",
                  "    pm.expect(todo).to.have.property('priority');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}"]
            },
            "description": "Retrieve a specific todo by its ID"
          }
        },
        {
          "name": "Get Active Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All todos are active (not completed)', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(function(todo) {",
                  "        pm.expect(todo.completed).to.be.false;",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/active",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "active"]
            },
            "description": "Retrieve only active (not completed) todos"
          }
        },
        {
          "name": "Get Todo Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Statistics data has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats).to.have.property('total');",
                  "    pm.expect(stats).to.have.property('active');",
                  "    pm.expect(stats).to.have.property('completed');",
                  "    pm.expect(stats).to.have.property('overdue');",
                  "    pm.expect(stats).to.have.property('highPriority');",
                  "    pm.expect(stats.total).to.be.a('number');",
                  "    pm.expect(stats.active).to.be.a('number');",
                  "    pm.expect(stats.completed).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Statistics are mathematically consistent', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats.total).to.equal(stats.active + stats.completed);",
                  "    pm.expect(stats.active).to.be.at.least(0);",
                  "    pm.expect(stats.completed).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "stats"]
            },
            "description": "Get statistics about todos including total, active, completed, overdue, and high priority counts"
          }
        },
        {
          "name": "Update Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo updated successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated clinic management documentation\",\n  \"priority\": \"medium\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}"]
            },
            "description": "Update a todo with new values"
          }
        },
        {
          "name": "Toggle Todo Completion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo toggled successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}/toggle",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}", "toggle"]
            },
            "description": "Toggle the completion status of a todo"
          }
        },
        {
          "name": "Delete Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo deleted successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}"]
            },
            "description": "Delete a todo by its ID"
          }
        },
        {
          "name": "Create Todo - Missing Title (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "});",
                  "",
                  "pm.test('Error indicates title is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.include('Validation failed');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priority\": \"low\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Test validation error when title is missing"
          }
        }
      ]
    },
    {
      "name": "Error Handling & Edge Cases",
      "description": "Various error scenarios and edge cases for comprehensive testing",
      "item": [
        {
          "name": "Unknown Route - 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/unknown-route",
              "host": ["{{baseUrl}}"],
              "path": ["api", "unknown-route"]
            },
            "description": "Test 404 error for unknown routes"
          }
        },
        {
          "name": "Invalid JSON - 400",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"title\": \"test\", invalid json }"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Test error handling for invalid JSON in request body"
          }
        }
      ]
    }
  ]
}