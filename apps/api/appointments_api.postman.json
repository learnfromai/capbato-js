{
  "info": {
    "_postman_id": "a1p2p3o4-i5n6-7890-tmen-app1234567890",
    "name": "Appointments API",
    "description": "Appointment management endpoints for healthcare clinic\n\n## Appointment Management Architecture\nThe API manages patient appointments with comprehensive business logic:\n\n**Appointment Information:**\n- `id`: Unique appointment identifier\n- `patientId`: Reference to patient record (foreign key to User entity)\n- `reasonForVisit`: Purpose/reason for the appointment\n- `appointmentDate`: Date in ISO format (YYYY-MM-DD)\n- `appointmentTime`: Time in 24-hour format (HH:MM)\n- `status`: Appointment status ('scheduled', 'confirmed', 'cancelled')\n- `doctorId`: Reference to doctor record (foreign key to Doctor entity)\n- `createdAt`: Creation timestamp\n- `updatedAt`: Last update timestamp\n\n**Note:** Patient name and contact info are retrieved from User entity via patientId for data consistency\n\n**Business Rules Implemented:**\n- **Time Slot Limits**: Maximum 4 appointments per time slot\n- **Duplicate Prevention**: One appointment per patient per day\n- **Past Date Validation**: Cannot schedule appointments for past dates\n- **Status Transitions**: scheduled → confirmed/cancelled\n- **Patient Validation**: Patient must exist before appointment creation\n\n**Appointment Status Flow:**\n1. **scheduled**: Initial status when appointment is created\n2. **confirmed**: Appointment is confirmed by staff/patient\n3. **cancelled**: Appointment is cancelled\n\n**API Response Structure:**\nAll responses follow a consistent format:\n- `success`: Boolean indicating operation success\n- `data`: The actual response data (appointment object or array)\n- `message`: Success/error message for operations\n\n**Query Capabilities:**\n- Get appointments by patient ID\n- Get appointments by date range\n- Get today's appointments\n- Get confirmed appointments only\n- Get appointment statistics and summaries\n\n**Time Format Support:**\nThe API accepts various time formats:\n- 24-hour format: '14:30', '09:00'\n- 12-hour format: '2:30 PM', '9:00 AM'\n- Automatically converts to consistent format\n\n**Integration with Other APIs:**\nAppointments API integrates with:\n- **Patient API**: Validates patient existence and retrieves contact info\n- **Doctor API**: Associates appointments with doctor profiles\n- **Schedule API**: Coordinates with doctor availability",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "item": [
    {
      "name": "📋 Basic CRUD Operations",
      "item": [
        {
          "name": "Get All Appointments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments"]
            },
            "description": "Get all appointments in the system\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"apt_123\",\n      \"patientId\": 1,\n      \"reasonForVisit\": \"Regular checkup\",\n      \"appointmentDate\": \"2025-08-05\",\n      \"appointmentTime\": \"14:30\",\n      \"status\": \"scheduled\",\n      \"doctorId\": 2,\n      \"createdAt\": \"2025-08-02T10:00:00Z\",\n      \"updatedAt\": null\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Administrative overview\n- Appointment list displays\n- Data analysis and reporting"
          },
          "response": []
        },
        {
          "name": "Get Appointment by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/{{appointment_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "{{appointment_id}}"]
            },
            "description": "Get a specific appointment by its ID\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Use Cases:**\n- View appointment details\n- Edit appointment forms\n- Appointment confirmation pages"
          },
          "response": []
        },
        {
          "name": "Create New Appointment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": {{sample_patient_id}},\n  \"reasonForVisit\": \"Regular checkup\",\n  \"appointmentDate\": \"{{future_date}}\",\n  \"appointmentTime\": \"14:30\",\n  \"doctorId\": {{sample_doctor_id}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/appointments",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments"]
            },
            "description": "Create a new appointment\n\n**Required Fields:**\n- `patientId`: Must be a valid patient ID from the system (foreign key to User entity)\n- `reasonForVisit`: Purpose of the appointment\n- `appointmentDate`: Date in YYYY-MM-DD format (future date only)\n- `appointmentTime`: Time in HH:MM format or with AM/PM\n- `doctorId`: Must be a valid doctor ID from the system (foreign key to Doctor entity)\n\n**Optional Fields:**\n- `status`: Defaults to 'scheduled' if not provided\n\n**Business Validations:**\n- Patient must exist in the database\n- Doctor must exist in the database\n- Date cannot be in the past\n- Maximum 4 appointments per time slot\n- One appointment per patient per day\n- Time slot must be valid\n\n**Expected Response:** 201 Created with appointment details"
          },
          "response": []
        },
        {
          "name": "Update Appointment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reasonForVisit\": \"Follow-up consultation\",\n  \"appointmentDate\": \"{{updated_date}}\",\n  \"appointmentTime\": \"15:00\",\n  \"doctorId\": {{updated_doctor_id}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/appointments/{{appointment_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "{{appointment_id}}"]
            },
            "description": "Update an existing appointment\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Updatable Fields:**\n- `patientId`: Patient ID (foreign key to User entity)\n- `reasonForVisit`: Purpose of visit\n- `appointmentDate`: New date (must be future date)\n- `appointmentTime`: New time\n- `doctorId`: Assigned doctor ID (foreign key to Doctor entity)\n- `status`: Appointment status\n\n**Business Validations:**\n- All create validations apply\n- Cannot update cancelled appointments\n- Time slot availability checked for new time\n- Patient and doctor must exist in database\n\n**Note:** Use dedicated endpoints for status changes (confirm/cancel/reschedule)"
          },
          "response": []
        },
        {
          "name": "Delete Appointment",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/{{appointment_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "{{appointment_id}}"]
            },
            "description": "Delete an appointment permanently\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Use Cases:**\n- Administrative cleanup\n- Error correction\n- Patient request for complete removal\n\n**Note:** For most cases, use 'Cancel Appointment' instead of deletion\n\n**Expected Response:** 200 OK with success message"
          },
          "response": []
        }
      ],
      "description": "Basic CRUD operations for appointment management"
    },
    {
      "name": "🔄 Status Management",
      "item": [
        {
          "name": "Confirm Appointment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/{{appointment_id}}/confirm",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "{{appointment_id}}", "confirm"]
            },
            "description": "Confirm a scheduled appointment\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Business Rules:**\n- Only 'scheduled' appointments can be confirmed\n- Cannot confirm cancelled appointments\n- Time slot availability is verified (max 4 confirmed per slot)\n\n**Status Flow:** scheduled → confirmed\n\n**Use Cases:**\n- Patient confirmation calls\n- Staff confirmation process\n- Automated confirmation systems\n\n**Expected Response:** 200 OK with updated appointment"
          },
          "response": []
        },
        {
          "name": "Cancel Appointment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Patient requested cancellation\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/appointments/{{appointment_id}}/cancel",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "{{appointment_id}}", "cancel"]
            },
            "description": "Cancel an appointment\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Optional Body:**\n- `reason`: Reason for cancellation (optional)\n\n**Business Rules:**\n- Can cancel both 'scheduled' and 'confirmed' appointments\n- Cannot cancel already cancelled appointments\n- Frees up the time slot for other appointments\n\n**Status Flow:** scheduled/confirmed → cancelled\n\n**Use Cases:**\n- Patient cancellations\n- Emergency rescheduling\n- Doctor unavailability\n\n**Expected Response:** 200 OK with updated appointment"
          },
          "response": []
        },
        {
          "name": "Reschedule Appointment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"appointmentDate\": \"{{new_date}}\",\n  \"appointmentTime\": \"16:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/appointments/{{appointment_id}}/reschedule",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "{{appointment_id}}", "reschedule"]
            },
            "description": "Reschedule an appointment to a new date and time\n\n**Path Parameters:**\n- `appointment_id`: The unique identifier of the appointment\n\n**Required Body:**\n- `appointmentDate`: New appointment date (YYYY-MM-DD format)\n- `appointmentTime`: New appointment time (HH:MM format)\n\n**Business Rules:**\n- Cannot reschedule to past dates\n- New time slot availability is verified\n- Original time slot is freed up\n- Status returns to 'scheduled'\n\n**Status Flow:** any → scheduled (with new date/time)\n\n**Use Cases:**\n- Patient schedule conflicts\n- Doctor availability changes\n- Emergency rescheduling\n\n**Expected Response:** 200 OK with updated appointment"
          },
          "response": []
        }
      ],
      "description": "Appointment status management operations"
    },
    {
      "name": "🔍 Query Operations",
      "item": [
        {
          "name": "Get Appointments by Patient",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/patient/{{patient_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "patient", "{{patient_id}}"]
            },
            "description": "Get all appointments for a specific patient\n\n**Path Parameters:**\n- `patient_id`: The unique identifier of the patient\n\n**Response:** Array of appointments ordered by date (most recent first)\n\n**Use Cases:**\n- Patient history review\n- Medical record systems\n- Patient portals\n- Appointment history displays"
          },
          "response": []
        },
        {
          "name": "Get Today's Appointments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/today",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "today"]
            },
            "description": "Get all appointments scheduled for today\n\n**Response:** Array of today's appointments ordered by time\n\n**Includes all statuses:** scheduled, confirmed, cancelled\n\n**Use Cases:**\n- Daily appointment dashboard\n- Reception desk displays\n- Daily planning and scheduling\n- Staff coordination"
          },
          "response": []
        },
        {
          "name": "Get Today's Confirmed Appointments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/today/confirmed",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "today", "confirmed"]
            },
            "description": "Get only confirmed appointments for today\n\n**Response:** Array of confirmed appointments for today ordered by time\n\n**Status Filter:** Only 'confirmed' appointments\n\n**Use Cases:**\n- Doctor's daily schedule\n- Confirmed patient list\n- Resource planning\n- Final daily schedule confirmation"
          },
          "response": []
        },
        {
          "name": "Get All Confirmed Appointments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/confirmed",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "confirmed"]
            },
            "description": "Get all confirmed appointments in the system\n\n**Response:** Array of all confirmed appointments\n\n**Status Filter:** Only 'confirmed' appointments\n\n**Use Cases:**\n- Confirmed appointments overview\n- Revenue planning\n- Doctor workload analysis\n- Confirmed appointment statistics"
          },
          "response": []
        },
        {
          "name": "Get Appointments by Date",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/date/{{target_date}}",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "date", "{{target_date}}"]
            },
            "description": "Get appointments for a specific date\n\n**Path Parameters:**\n- `target_date`: Date in YYYY-MM-DD format\n\n**Response:** Array of appointments for the specified date\n\n**Use Cases:**\n- Date-specific appointment views\n- Calendar integration\n- Historical appointment data\n- Daily schedule planning"
          },
          "response": []
        },
        {
          "name": "Get Appointments by Date Range",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/date-range?startDate={{start_date}}&endDate={{end_date}}",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "date-range"],
              "query": [
                {
                  "key": "startDate",
                  "value": "{{start_date}}",
                  "description": "Start date in YYYY-MM-DD format"
                },
                {
                  "key": "endDate",
                  "value": "{{end_date}}",
                  "description": "End date in YYYY-MM-DD format"
                }
              ]
            },
            "description": "Get appointments within a specific date range\n\n**Query Parameters:**\n- `startDate`: Start date in YYYY-MM-DD format\n- `endDate`: End date in YYYY-MM-DD format\n\n**Response:** Array of appointments within the date range\n\n**Use Cases:**\n- Weekly/monthly appointment views\n- Reporting and analytics\n- Calendar range displays\n- Appointment trend analysis"
          },
          "response": []
        }
      ],
      "description": "Query operations for finding specific appointments"
    },
    {
      "name": "📊 Statistics & Reports",
      "item": [
        {
          "name": "Get Appointment Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "stats"]
            },
            "description": "Get comprehensive appointment statistics\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"total\": 150,\n    \"scheduled\": 45,\n    \"confirmed\": 85,\n    \"cancelled\": 20,\n    \"today\": 12,\n    \"todayConfirmed\": 8,\n    \"thisWeek\": 35,\n    \"thisMonth\": 120,\n    \"upcomingConfirmed\": 25\n  }\n}\n```\n\n**Use Cases:**\n- Dashboard statistics\n- Performance metrics\n- Business intelligence\n- Management reporting"
          },
          "response": []
        },
        {
          "name": "Get Weekly Appointment Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/stats/weekly",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "stats", "weekly"]
            },
            "description": "Get weekly appointment summary for the last 7 days\n\n**Response Format:**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"date\": \"2025-08-01\",\n      \"count\": 8,\n      \"confirmed\": 6,\n      \"scheduled\": 2,\n      \"cancelled\": 0\n    },\n    {\n      \"date\": \"2025-08-02\",\n      \"count\": 12,\n      \"confirmed\": 10,\n      \"scheduled\": 2,\n      \"cancelled\": 0\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Weekly performance charts\n- Trend analysis\n- Capacity planning\n- Weekly reports"
          },
          "response": []
        }
      ],
      "description": "Statistical data and reporting endpoints"
    },
    {
      "name": "🧪 Test Scenarios",
      "item": [
        {
          "name": "Test - Create Valid Appointment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": \"{{sample_patient_id}}\",\n  \"reasonForVisit\": \"Test appointment\",\n  \"appointmentDate\": \"{{tomorrow_date}}\",\n  \"appointmentTime\": \"10:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/appointments",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments"]
            },
            "description": "Test creating a valid appointment\n\n**Expected:** 201 Created with appointment details\n\n**Test Validations:**\n- Valid patient ID (foreign key to User entity)\n- Valid doctor ID (foreign key to Doctor entity)\n- Future date\n- Valid time format\n- All required fields present"
          },
          "response": []
        },
        {
          "name": "Test - Create Past Date Appointment (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": \"{{sample_patient_id}}\",\n  \"reasonForVisit\": \"Test past appointment\",\n  \"appointmentDate\": \"2025-01-01\",\n  \"appointmentTime\": \"10:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/appointments",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments"]
            },
            "description": "Test creating appointment with past date\n\n**Expected:** 400 Bad Request with validation error\n\n**Error:** 'Cannot create appointment for past date'"
          },
          "response": []
        },
        {
          "name": "Test - Create Duplicate Patient Date (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": \"{{sample_patient_id}}\",\n  \"reasonForVisit\": \"Duplicate test\",\n  \"appointmentDate\": \"{{tomorrow_date}}\",\n  \"appointmentTime\": \"11:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/appointments",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments"]
            },
            "description": "Test creating second appointment for same patient on same date\n\n**Prerequisite:** Run after 'Test - Create Valid Appointment'\n\n**Expected:** 409 Conflict\n\n**Error:** 'Patient already has an appointment on this date'"
          },
          "response": []
        },
        {
          "name": "Test - Invalid Patient ID (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": \"99999999-9999-9999-9999-999999999999\",\n  \"reasonForVisit\": \"Test invalid patient\",\n  \"appointmentDate\": \"{{tomorrow_date}}\",\n  \"appointmentTime\": \"12:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/appointments",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments"]
            },
            "description": "Test creating appointment with non-existent patient ID\n\n**Expected:** 400 Bad Request\n\n**Error:** 'Patient does not exist in the database'"
          },
          "response": []
        },
        {
          "name": "Test - Time Slot Capacity (4 Appointments)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patientId\": \"880e8400-e29b-41d4-a716-446655440008\",\n  \"reasonForVisit\": \"Time slot capacity test\",\n  \"appointmentDate\": \"{{day_after_tomorrow}}\",\n  \"appointmentTime\": \"14:00\",\n  \"doctorId\": \"{{sample_doctor_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/appointments",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments"]
            },
            "description": "Test time slot capacity limits\n\n**Instructions:**\n1. Run this request 4 times with different patient UUIDs\n2. The 5th attempt should fail with time slot full error\n\n**Expected (1st-4th):** 201 Created\n**Expected (5th):** 409 Conflict - 'Time slot is already booked'"
          },
          "response": []
        },
        {
          "name": "Test - Confirm Non-existent Appointment (Should Fail)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/non-existent-id/confirm",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "non-existent-id", "confirm"]
            },
            "description": "Test confirming non-existent appointment\n\n**Expected:** 404 Not Found\n\n**Error:** 'Appointment not found'"
          },
          "response": []
        }
      ],
      "description": "Test scenarios for validation and error handling"
    },
    {
      "name": "🔄 Workflow Examples",
      "item": [
        {
          "name": "Workflow - Complete Appointment Lifecycle",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments"]
            },
            "description": "**Complete Appointment Lifecycle Demo**\n\n**Step 1:** Create appointment (status: 'scheduled')\n- `POST /api/appointments`\n\n**Step 2:** Confirm appointment (status: 'confirmed')\n- `PUT /api/appointments/{id}/confirm`\n\n**Step 3:** Reschedule if needed (status: 'scheduled')\n- `PUT /api/appointments/{id}/reschedule`\n\n**Step 4:** Re-confirm after reschedule (status: 'confirmed')\n- `PUT /api/appointments/{id}/confirm`\n\n**Alternative Step 4:** Cancel if needed (status: 'cancelled') \n- `PUT /api/appointments/{id}/cancel`\n\n**Verification Steps:**\n- `GET /api/appointments/{id}` - Check appointment details\n- `GET /api/appointments/patient/{patientId}` - Patient history\n- `GET /api/appointments/today` - Today's appointments\n\n**Result:** Full appointment management workflow"
          },
          "response": []
        },
        {
          "name": "Workflow - Daily Appointment Management",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/appointments/today",
              "host": ["{{base_url}}"],
              "path": ["api", "appointments", "today"]
            },
            "description": "**Daily Appointment Management Workflow**\n\n**Morning Setup:**\n1. `GET /api/appointments/today` - Get all today's appointments\n2. `GET /api/appointments/today/confirmed` - Get confirmed only\n3. `GET /api/appointments/stats` - Check overall statistics\n\n**During the Day:**\n4. `PUT /api/appointments/{id}/confirm` - Confirm arriving patients\n5. `PUT /api/appointments/{id}/cancel` - Handle cancellations\n6. `PUT /api/appointments/{id}/reschedule` - Reschedule as needed\n7. `POST /api/appointments` - Create walk-in appointments\n\n**End of Day:**\n8. `GET /api/appointments/stats/weekly` - Weekly summary\n9. `GET /api/appointments/date/{{tomorrow_date}}` - Tomorrow's schedule\n\n**Result:** Complete daily workflow for clinic staff"
          },
          "response": []
        }
      ],
      "description": "Complete workflow examples for common use cases"
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:4000",
      "type": "string",
      "description": "Base URL for the API server"
    },
    {
      "key": "appointment_id",
      "value": "apt_sample_123",
      "type": "string",
      "description": "Sample appointment ID - replace with actual ID from responses"
    },
    {
      "key": "patient_id",
      "value": "550e8400-e29b-41d4-a716-446655440001",
      "type": "string",
      "description": "Sample patient ID (UUID) - replace with actual patient ID from Patient API"
    },
    {
      "key": "sample_patient_id",
      "value": "550e8400-e29b-41d4-a716-446655440001",
      "type": "string",
      "description": "Sample patient ID (UUID) for creating appointments"
    },
    {
      "key": "sample_doctor_id",
      "value": "660e8400-e29b-41d4-a716-446655440002",
      "type": "string",
      "description": "Sample doctor ID (UUID) for creating appointments"
    },
    {
      "key": "updated_doctor_id",
      "value": "770e8400-e29b-41d4-a716-446655440003",
      "type": "string",
      "description": "Updated doctor ID (UUID) for testing updates"
    },
    {
      "key": "future_date",
      "value": "2025-08-10",
      "type": "string",
      "description": "Sample future date for appointments"
    },
    {
      "key": "updated_date",
      "value": "2025-08-11",
      "type": "string",
      "description": "Updated date for rescheduling"
    },
    {
      "key": "new_date",
      "value": "2025-08-12",
      "type": "string",
      "description": "New date for rescheduling"
    },
    {
      "key": "target_date",
      "value": "2025-08-05",
      "type": "string",
      "description": "Target date for date-specific queries"
    },
    {
      "key": "start_date",
      "value": "2025-08-01",
      "type": "string",
      "description": "Start date for date range queries"
    },
    {
      "key": "end_date",
      "value": "2025-08-31",
      "type": "string",
      "description": "End date for date range queries"
    },
    {
      "key": "tomorrow_date",
      "value": "2025-08-03",
      "type": "string",
      "description": "Tomorrow's date for testing - update daily"
    },
    {
      "key": "day_after_tomorrow",
      "value": "2025-08-04",
      "type": "string",
      "description": "Day after tomorrow for testing - update daily"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Appointments API Pre-request Script",
          "// This script sets up dynamic variables and validates prerequisites",
          "",
          "// Set dynamic dates",
          "const today = new Date();",
          "const tomorrow = new Date(today);",
          "tomorrow.setDate(today.getDate() + 1);",
          "const dayAfterTomorrow = new Date(today);",
          "dayAfterTomorrow.setDate(today.getDate() + 2);",
          "",
          "// Format dates as YYYY-MM-DD",
          "const formatDate = (date) => {",
          "    return date.toISOString().split('T')[0];",
          "};",
          "",
          "// Update dynamic date variables",
          "pm.variables.set('tomorrow_date', formatDate(tomorrow));",
          "pm.variables.set('day_after_tomorrow', formatDate(dayAfterTomorrow));",
          "pm.variables.set('future_date', formatDate(tomorrow));",
          "pm.variables.set('updated_date', formatDate(dayAfterTomorrow));",
          "",
          "// Set timestamp for request tracking",
          "pm.globals.set('request_timestamp', new Date().toISOString());",
          "",
          "// Validate base_url is set",
          "if (!pm.variables.get('base_url')) {",
          "    console.warn('⚠️ base_url variable not set. Using default: http://localhost:4000');",
          "    pm.variables.set('base_url', 'http://localhost:4000');",
          "}",
          "",
          "// Log request info",
          "console.log('📅 Appointments API Request:', pm.info.requestName);",
          "console.log('📅 Tomorrow Date:', pm.variables.get('tomorrow_date'));",
          "console.log('📅 Day After Tomorrow:', pm.variables.get('day_after_tomorrow'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Appointments API Global Test Script",
          "// These tests run after every request in the collection",
          "",
          "// Test 1: Response time should be reasonable",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000); // 2 seconds",
          "});",
          "",
          "// Test 2: Response should be JSON",
          "pm.test('Response is JSON', function () {",
          "    pm.response.to.have.header('content-type');",
          "    pm.expect(pm.response.headers.get('content-type')).to.include('application/json');",
          "});",
          "",
          "// Test 3: Success responses should have proper structure",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    pm.test('Success response has correct structure', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success');",
          "        pm.expect(jsonData).to.have.property('data');",
          "        pm.expect(jsonData.success).to.be.true;",
          "    });",
          "",
          "    // Test appointment data structure for GET requests",
          "    if (pm.request.method === 'GET') {",
          "        pm.test('Appointment data has required properties', function () {",
          "            const jsonData = pm.response.json();",
          "            if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
          "                const appointment = jsonData.data[0];",
          "                pm.expect(appointment).to.have.property('id');",
          "                pm.expect(appointment).to.have.property('patientId');",
          "                pm.expect(appointment).to.have.property('doctorId');",
          "                pm.expect(appointment).to.have.property('reasonForVisit');",
          "                pm.expect(appointment).to.have.property('appointmentDate');",
          "                pm.expect(appointment).to.have.property('appointmentTime');",
          "                pm.expect(appointment).to.have.property('status');",
          "                pm.expect(appointment).to.have.property('createdAt');",
          "            } else if (jsonData.data && !Array.isArray(jsonData.data)) {",
          "                // Single appointment object",
          "                const appointment = jsonData.data;",
          "                pm.expect(appointment).to.have.property('id');",
          "                pm.expect(appointment).to.have.property('patientId');",
          "                pm.expect(appointment).to.have.property('doctorId');",
          "            }",
          "        });",
          "    }",
          "",
          "    // Store appointment ID for chaining requests",
          "    if (pm.request.method === 'POST' && pm.info.requestName.includes('Create')) {",
          "        const jsonData = pm.response.json();",
          "        if (jsonData.data && jsonData.data.id) {",
          "            pm.collectionVariables.set('appointment_id', jsonData.data.id);",
          "            console.log('📅 Stored appointment ID:', jsonData.data.id);",
          "        }",
          "    }",
          "}",
          "",
          "// Test 4: Error responses should have proper structure",
          "if (pm.response.code >= 400) {",
          "    pm.test('Error response has proper structure', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success');",
          "        pm.expect(jsonData.success).to.be.false;",
          "    });",
          "}",
          "",
          "// Test 5: Status-specific validations",
          "if (pm.response.code === 201) {",
          "    pm.test('Created response has proper status', function () {",
          "        pm.expect(pm.response.code).to.equal(201);",
          "    });",
          "}",
          "",
          "if (pm.response.code === 404) {",
          "    pm.test('Not Found response has proper error message', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('error');",
          "        pm.expect(jsonData.error.toLowerCase()).to.include('not found');",
          "    });",
          "}",
          "",
          "// Test 6: Business rule validations for expected errors",
          "if (pm.info.requestName.includes('Should Fail')) {",
          "    pm.test('Expected validation error occurred', function () {",
          "        pm.expect(pm.response.code).to.be.oneOf([400, 404, 409]);",
          "    });",
          "}",
          "",
          "// Log response summary",
          "console.log('📊 Response Summary:', {",
          "    request: pm.info.requestName,",
          "    status: pm.response.code,",
          "    time: pm.response.responseTime + 'ms',",
          "    size: pm.response.responseSize + ' bytes'",
          "});",
          "",
          "// Store statistics data for reporting",
          "if (pm.info.requestName.includes('Statistics') && pm.response.code === 200) {",
          "    const jsonData = pm.response.json();",
          "    console.log('📈 Appointment Statistics:', jsonData.data);",
          "}",
          "",
          "// Store weekly summary for analysis",
          "if (pm.info.requestName.includes('Weekly') && pm.response.code === 200) {",
          "    const jsonData = pm.response.json();",
          "    console.log('📅 Weekly Summary:', jsonData.data);",
          "}"
        ]
      }
    }
  ]
}
