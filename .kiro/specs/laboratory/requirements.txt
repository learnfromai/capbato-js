Page Layout and Navigation:
WHEN a user navigates to the laboratory page
THE SYSTEM SHALL display the laboratory interface with top navbar, sidebar navigation, and main content area

WHEN the laboratory page loads
THE SYSTEM SHALL highlight the "Laboratory" navigation item as active in the sidebar

WHEN the laboratory page loads
THE SYSTEM SHALL display the user's role and username in the top navbar with profile avatar

WHEN a user clicks on the profile avatar
THE SYSTEM SHALL display a dropdown menu with "Settings" and "Logout" options

WHEN a user clicks on any sidebar navigation item
THE SYSTEM SHALL navigate to the corresponding page

WHEN a user with admin role accesses the laboratory page
THE SYSTEM SHALL inject an "Accounts" navigation item in the sidebar if not already present

---

Laboratory Data Table Display:
WHEN the laboratory page loads
THE SYSTEM SHALL fetch and display laboratory requests from the API endpoint `/api/lab_requests`

WHEN laboratory data is loaded
THE SYSTEM SHALL display a table with columns: Patient #, Patient's Name, Status, and Results

WHEN displaying patient names in the table
THE SYSTEM SHALL format names in proper title case (first letter capitalized)

WHEN displaying laboratory request status
THE SYSTEM SHALL show "Pending" if any test is pending, "Complete" if all tests are complete, or the most recent status

WHEN laboratory data fails to load
THE SYSTEM SHALL log the error to console and handle gracefully without breaking the interface

WHEN the laboratory table is empty
THE SYSTEM SHALL display the table structure with no data rows

---

Add Lab Test Functionality:
WHEN a user clicks the "Add Lab Test" button
THE SYSTEM SHALL open the lab request form in an overlay modal

WHEN the lab request form overlay opens
THE SYSTEM SHALL load `lab-request-form.html` in an iframe and display it centered on screen

WHEN a user clicks the close button on the lab request overlay
THE SYSTEM SHALL close the overlay and clear the iframe source

WHEN a lab request form is submitted successfully
THE SYSTEM SHALL close the overlay, refresh the laboratory table data, and display a success toast message

---

Lab Test Results Modal:
WHEN a user clicks the "View" button for a patient
THE SYSTEM SHALL open the lab test modal displaying detailed test information for that patient

WHEN the lab test modal opens
THE SYSTEM SHALL display the patient ID and patient name in the modal header

WHEN the lab test modal opens
THE SYSTEM SHALL group and display lab tests by category: ROUTINE, SEROLOGY & IMMUNOLOGY, BLOOD CHEMISTRY, MISCELLANEOUS TEST, THYROID FUNCTION TEST

WHEN displaying lab tests in the modal
THE SYSTEM SHALL show test name, date, status, and appropriate action buttons for each test

WHEN a lab test has "Complete" status
THE SYSTEM SHALL display "View" and "Edit" action buttons

WHEN a lab test has "Pending" status
THE SYSTEM SHALL display "Add Result" and "Cancel" action buttons

WHEN no lab tests exist for a patient
THE SYSTEM SHALL display "No test results available" message in the modal table

WHEN a user clicks the close button on the lab test modal
THE SYSTEM SHALL close the modal and return to the laboratory table view

---

Lab Result Form Management:
WHEN a user clicks "Add Result" button
THE SYSTEM SHALL open the appropriate lab result form in overlay based on the test type

WHEN a user clicks "View" button for completed results
THE SYSTEM SHALL open the corresponding lab result form in read-only mode

WHEN a user clicks "Edit" button for completed results
THE SYSTEM SHALL open the corresponding lab result form in edit mode

WHEN opening lab result forms
THE SYSTEM SHALL map test types to appropriate forms: urinalysis→urinalysis.html, fbs→blood-chemistry.html, cbc_with_platelet→hematology.html, serology tests→serology-immunology.html

WHEN a lab result form loads in the overlay
THE SYSTEM SHALL post patient data to the form via window.postMessage

WHEN a lab result form is submitted
THE SYSTEM SHALL update the lab request status, refresh the modal content, and refresh the main table

---

Lab Test Status Management:
WHEN a user clicks "Cancel" button on a pending test
THE SYSTEM SHALL display a confirmation modal asking "Are you sure you want to cancel this lab test?"

WHEN a user confirms test cancellation
THE SYSTEM SHALL update the test status to "Canceled" and close the confirmation modal

WHEN a user declines test cancellation
THE SYSTEM SHALL close the confirmation modal without making changes

WHEN lab results are added to a pending test
THE SYSTEM SHALL update the test status to "Complete" and set the date_taken field

WHEN the laboratory table displays status
THE SYSTEM SHALL determine overall patient status based on individual test statuses

---

URL Parameter Handling and Deep Linking:
WHEN a user navigates to laboratory page with openModal parameter
THE SYSTEM SHALL automatically open the lab test modal for the specified patient

WHEN a user navigates with testType and readOnly parameters
THE SYSTEM SHALL directly open the specific lab result form in read-only mode

WHEN opening lab forms from URL parameters
THE SYSTEM SHALL wait for table data to load before processing the modal opening

WHEN URL parameters specify a patient not found in the loaded data
THE SYSTEM SHALL handle gracefully without errors

---

Form Communication and Message Handling:
WHEN a lab result form sends a "closeLabOverlay" message
THE SYSTEM SHALL close the overlay and clear the iframe source

WHEN closing lab overlay after form submission
THE SYSTEM SHALL display toast message if provided in the close message

WHEN closing lab overlay in "view" mode
THE SYSTEM SHALL reopen the lab test modal to maintain user context

WHEN closing lab overlay in "edit" mode
THE SYSTEM SHALL refresh the laboratory table data

WHEN closing lab overlay in "addResult" mode
THE SYSTEM SHALL refresh both the modal content and the main table data

---

User Interface Feedback and Notifications:
WHEN displaying toast notifications
THE SYSTEM SHALL show toast messages at the top center of the screen with fade in/out animation

WHEN toast notifications are displayed
THE SYSTEM SHALL automatically hide them after 3 seconds

WHEN API calls fail
THE SYSTEM SHALL log errors to console for debugging purposes

WHEN forms are loading
THE SYSTEM SHALL provide appropriate loading states and prevent user interaction issues

---

Data Grouping and Categorization:
WHEN processing laboratory data for display
THE SYSTEM SHALL group tests into categories: ROUTINE, SEROLOGY & IMMUNOLOGY, BLOOD CHEMISTRY, MISCELLANEOUS TEST, THYROID FUNCTION TEST

WHEN displaying test names
THE SYSTEM SHALL use human-readable labels: cbc_with_platelet→"CBC with Platelet", fbs→"FBS", urinalysis→"Urinalysis"

WHEN grouping patient laboratory data
THE SYSTEM SHALL consolidate multiple test requests by patient_id and display as single table rows

WHEN determining patient status
THE SYSTEM SHALL evaluate all tests for a patient and show "Pending" if any test is pending, otherwise show appropriate combined status

---

Authentication and Session Management:
WHEN a user accesses the laboratory page
THE SYSTEM SHALL verify user authentication status from localStorage

WHEN displaying user information
THE SYSTEM SHALL show the logged-in user's role in uppercase and username from localStorage

WHEN generating profile avatar
THE SYSTEM SHALL use the first letter of the username and assign consistent color based on username hash

WHEN a user clicks "Logout" in profile dropdown
THE SYSTEM SHALL clear authentication data from localStorage and redirect to login page

---

Responsive Design and Layout:
WHEN the laboratory page is displayed on mobile devices
THE SYSTEM SHALL hide the sidebar and adjust main content layout accordingly

WHEN the laboratory table is displayed
THE SYSTEM SHALL maintain appropriate column widths: Patient # (20%), Name (40%), Status (20%), Results (20%)

WHEN lab test modal is displayed
THE SYSTEM SHALL center the modal and ensure it fits within the viewport

WHEN overlay forms are displayed
THE SYSTEM SHALL ensure forms are responsive and properly sized for the viewport

---

API Integration and Error Handling:
WHEN making API requests to fetch laboratory data
THE SYSTEM SHALL handle both array responses and paginated responses with rows property

WHEN API requests fail
THE SYSTEM SHALL catch errors, log them to console, and prevent application crashes

WHEN updating lab request results
THE SYSTEM SHALL send PUT requests to `/api/lab_requests/:patientId/:requestDate` with appropriate data

WHEN creating new lab requests
THE SYSTEM SHALL send POST requests to `/api/lab_requests` with form data

WHEN API responses are received
THE SYSTEM SHALL validate data structure and handle unexpected formats gracefully