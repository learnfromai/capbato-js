Core Functionality:
WHEN a client sends GET request to /doctors 
THE SYSTEM SHALL return HTTP 200 with a JSON array of all doctors including DoctorID, FirstName, LastName, Specialization, and ContactNumber

WHEN a client sends GET request to /doctors with no doctors in the database
THE SYSTEM SHALL return HTTP 200 with an empty JSON array

WHEN a client sends POST request to /doctors with valid doctor data (FirstName, LastName, Specialization, ContactNumber) in JSON format
THE SYSTEM SHALL create a new doctor record and return HTTP 201 with the created doctor data including auto-generated DoctorID

WHEN a client sends GET request to /doctors/{id} with valid doctor ID
THE SYSTEM SHALL return HTTP 200 with the specific doctor's data in JSON format

WHEN a client sends PUT request to /doctors/{id} with valid doctor data and existing doctor ID
THE SYSTEM SHALL update the doctor record and return HTTP 200 with the updated doctor data

WHEN a client sends DELETE request to /doctors/{id} with existing doctor ID
THE SYSTEM SHALL remove the doctor record and return HTTP 204 with no content

---

Request Validation:
WHEN a client sends POST request to /doctors missing FirstName field
THE SYSTEM SHALL return HTTP 400 with error code DOCTOR_MISSING_FIRSTNAME and message "First name is required"

WHEN a client sends POST request to /doctors missing LastName field
THE SYSTEM SHALL return HTTP 400 with error code DOCTOR_MISSING_LASTNAME and message "Last name is required"

WHEN a client sends POST request to /doctors with FirstName longer than 50 characters
THE SYSTEM SHALL return HTTP 400 with error code DOCTOR_INVALID_FIRSTNAME and message "First name must be 50 characters or less"

WHEN a client sends POST request to /doctors with LastName longer than 50 characters
THE SYSTEM SHALL return HTTP 400 with error code DOCTOR_INVALID_LASTNAME and message "Last name must be 50 characters or less"

WHEN a client sends POST request to /doctors with Specialization longer than 100 characters
THE SYSTEM SHALL return HTTP 400 with error code DOCTOR_INVALID_SPECIALIZATION and message "Specialization must be 100 characters or less"

WHEN a client sends POST request to /doctors with ContactNumber longer than 20 characters
THE SYSTEM SHALL return HTTP 400 with error code DOCTOR_INVALID_CONTACT and message "Contact number must be 20 characters or less"

WHEN a client sends PUT request to /doctors/{id} with invalid field lengths
THE SYSTEM SHALL return HTTP 400 with appropriate field-specific error codes and messages

WHEN a client sends request to /doctors/{id} with non-numeric doctor ID
THE SYSTEM SHALL return HTTP 400 with error code DOCTOR_INVALID_ID and message "Doctor ID must be a valid number"

---

Error Handling:
WHEN a client sends GET request to /doctors/{id} with non-existent doctor ID
THE SYSTEM SHALL return HTTP 404 with error code DOCTOR_NOT_FOUND and message "Doctor not found"

WHEN a client sends PUT request to /doctors/{id} with non-existent doctor ID
THE SYSTEM SHALL return HTTP 404 with error code DOCTOR_NOT_FOUND and message "Doctor not found"

WHEN a client sends DELETE request to /doctors/{id} with non-existent doctor ID
THE SYSTEM SHALL return HTTP 404 with error code DOCTOR_NOT_FOUND and message "Doctor not found"

WHEN the database connection fails during any doctor operation
THE SYSTEM SHALL return HTTP 500 with error code DATABASE_ERROR and message "Database error"

WHEN the database query execution fails during any doctor operation
THE SYSTEM SHALL return HTTP 500 with error code DATABASE_ERROR and message "Database error"

WHEN any unexpected server error occurs during doctor operations
THE SYSTEM SHALL return HTTP 500 with error code INTERNAL_ERROR and message "Internal server error"

---

Response Format:
THE SYSTEM SHALL return all doctor data in JSON format with consistent field names: DoctorID, FirstName, LastName, Specialization, ContactNumber
THE SYSTEM SHALL return null values for optional fields (Specialization, ContactNumber) when not provided
THE SYSTEM SHALL return DoctorID as an integer value in all responses containing doctor data
THE SYSTEM SHALL include appropriate HTTP headers for JSON content type in all responses
THE SYSTEM SHALL log all database errors with timestamp and error details for debugging purposes

---

Security Requirements:
THE SYSTEM SHALL validate all input data to prevent SQL injection attacks
THE SYSTEM SHALL sanitize all string inputs before database operations
THE SYSTEM SHALL implement rate limiting for doctor API endpoints to prevent abuse
THE SYSTEM SHALL log all doctor data modification attempts with user information and timestamp
THE SYSTEM SHALL require appropriate authentication and authorization for POST, PUT, and DELETE operations on doctor records