API ENDPOINT IMPLEMENTATION CHECKLIST
====================================

Follow this checklist when implementing new API endpoints to ensure Clean Architecture,
SOLID principles, and consistent patterns with existing Todo/Auth implementations.

DOMAIN LAYER (libs/domain/)
---------------------------

[ ] Create entity with business logic
    - File: src/entities/FeatureName.ts
    - Example: libs/domain/src/entities/Todo.ts
    - Private readonly fields with public getters
    - Business methods like toggle(), update(), validate()
    - Immutable - create new instances for changes

[ ] Create value objects with validation
    - File: src/value-objects/FeatureNameProperty.ts
    - Example: libs/domain/src/value-objects/TodoTitle.ts
    - Self-validating in constructor
    - Immutable with equals() method

[ ] Define repository interface
    - File: src/repositories/IFeatureNameRepository.ts
    - Example: libs/domain/src/repositories/ITodoRepository.ts
    - Pure interface, no implementation details
    - Methods: getAll(), create(), update(), delete(), getById()

[ ] Create domain services if needed
    - File: src/services/FeatureNameDomainService.ts
    - Example: libs/domain/src/services/TodoDomainService.ts
    - Manual instantiation in use cases (not DI)

[ ] Define domain events
    - File: src/events/FeatureNameEvents.ts
    - Example: libs/domain/src/events/TodoEvents.ts

[ ] Create domain exceptions
    - File: libs/domain/src/exceptions/DomainExceptions.ts
    - Extend base DomainException class
    - Proper error codes and HTTP status codes
    - Example: InvalidTodoTitleException, TodoAlreadyCompletedException

APPLICATION LAYER (libs/application-shared/)
--------------------------------------------

[ ] Create use cases for each business operation
    - File: src/use-cases/commands/ActionFeatureNameUseCase.ts
    - Example: libs/application-shared/src/use-cases/commands/CreateTodoUseCase.ts
    - Single responsibility per use case
    - @injectable() decorator
    - Constructor injection using TOKENS.*
    - No error handling (let domain exceptions bubble up)
    - Domain entity creation and validation

[ ] Create query handlers for data retrieval
    - File: src/use-cases/queries/GetFeatureNameQueryHandler.ts
    - Example: libs/application-shared/src/use-cases/queries/GetAllTodosQueryHandler.ts
    - CQRS pattern - separate from commands
    - @injectable() decorator
    - Constructor injection using TOKENS.*

[ ] Define command/query DTOs
    - File: src/dto/FeatureNameCommands.ts
    - File: src/dto/FeatureNameQueries.ts
    - Example: libs/application-shared/src/dto/TodoCommands.ts
    - Request DTOs for input validation
    - Response DTOs for API responses

[ ] Create validation schemas with Zod
    - File: src/validation/FeatureNameValidationSchemas.ts
    - Example: libs/application-shared/src/validation/TodoValidationSchemas.ts
    - Custom refinement functions for complex validation
    - Transform data and provide TypeScript types
    - Meaningful error messages

[ ] Implement validation services
    - File: src/validation/FeatureNameValidationService.ts
    - Example: libs/application-shared/src/validation/TodoValidationService.ts
    - Individual services extending ValidationService<unknown, CommandType>
    - Composite facade service following TodoValidationService pattern
    - @injectable() decorator for each service

[ ] Create mappers for data transformation
    - File: src/mappers/FeatureNameMapper.ts
    - Example: libs/application-shared/src/mappers/TodoMapper.ts
    - Static mapper class methods
    - toDto() and toDtoArray() methods
    - fromPlainObject() and toPlainObject() for ORM

[ ] Define service interfaces
    - File: src/interfaces/IFeatureNameService.ts
    - Example: libs/application-shared/src/interfaces/ITodoService.ts

APPLICATION API LAYER (libs/application-api/)
---------------------------------------------

[ ] Create API-specific use cases if needed
    - File: src/use-cases/commands/FeatureNameUseCase.ts
    - Example: libs/application-api/src/use-cases/commands/RegisterUserUseCase.ts
    - API-specific business logic
    - Infrastructure service integration (JWT, hashing, etc.)

INFRASTRUCTURE LAYER (apps/api/src/infrastructure/)
--------------------------------------------------

[ ] Implement repository with multiple persistence options
    - File: featurename/persistence/typeorm/TypeOrmFeatureNameRepository.ts
    - File: featurename/persistence/mongoose/MongooseFeatureNameRepository.ts
    - File: featurename/persistence/sqlite/SqliteFeatureNameRepository.ts
    - File: featurename/persistence/in-memory/InMemoryFeatureNameRepository.ts
    - Example: apps/api/src/infrastructure/todo/persistence/typeorm/TypeOrmTodoRepository.ts
    - Implement domain repository interface
    - Handle data mapping between domain and persistence

[ ] Create database entities/schemas
    - File: featurename/persistence/typeorm/FeatureNameEntity.ts
    - File: featurename/persistence/mongoose/FeatureNameSchema.ts
    - Example: apps/api/src/infrastructure/todo/persistence/typeorm/TodoEntity.ts

[ ] Register dependencies in DI container
    - File: apps/api/src/infrastructure/di/container.ts
    - Register repository implementations
    - Register use cases as singletons
    - Register validation services
    - Register infrastructure services
    - Use centralized TOKENS

[ ] Define DI tokens
    - File: libs/application-shared/src/di/tokens.ts
    - Unique symbols for all injectable services
    - Follow existing naming conventions

PRESENTATION LAYER (apps/api/src/presentation/)
----------------------------------------------

[ ] Create controller following TodoController pattern
    - File: controllers/FeatureNameController.ts
    - Example: apps/api/src/presentation/controllers/TodoController.ts
    - @Controller('/resource') with proper route prefix
    - @injectable() decorator
    - Constructor injection using TOKENS.*
    - No try/catch blocks (error handling via middleware)

[ ] Implement RESTful endpoints
    - Use proper HTTP method decorators (@Get, @Post, @Put, @Delete, @Patch)
    - Use @HttpCode() for non-standard status codes (201 for POST)
    - Parameter validation with TodoIdSchema.parse() pattern
    - Body validation through validation service
    - Consistent ApiResponseBuilder.success() responses

[ ] Example controller methods:
    @Get('/')
    async getAll(): Promise<FeatureNameListResponse> {
      const items = await this.getAllQueryHandler.execute();
      const itemDtos = FeatureNameMapper.toDtoArray(items);
      return ApiResponseBuilder.success(itemDtos);
    }

    @Post('/')
    @HttpCode(201)
    async create(@Body() body: CreateFeatureNameRequestDto): Promise<FeatureNameResponse> {
      const validatedData = this.validationService.validateCreateCommand(body);
      const item = await this.createUseCase.execute(validatedData);
      const itemDto = FeatureNameMapper.toDto(item);
      return ApiResponseBuilder.success(itemDto);
    }

ERROR HANDLING & MIDDLEWARE
---------------------------

[ ] Leverage existing error handling middleware
    - File: apps/api/src/shared/middleware/RoutingControllersErrorHandler.ts
    - No manual error handling in controllers
    - Domain exceptions automatically caught and formatted
    - ValidationError details preserved
    - Proper HTTP status codes returned

[ ] Create feature-specific domain exceptions
    - Add to libs/domain/src/exceptions/DomainExceptions.ts
    - Extend base DomainException class
    - Include proper error codes and HTTP status codes
    - Follow naming convention: FeatureName*Exception

API RESPONSE PATTERNS
---------------------

[ ] Use ApiResponseBuilder for consistent responses
    - File: apps/api/src/presentation/dto/ApiResponse.ts
    - Success responses: ApiResponseBuilder.success(data)
    - Operation responses: ApiResponseBuilder.successWithMessage(message)
    - Consistent response structure across all endpoints

[ ] Define response type interfaces
    - FeatureNameResponse for single item responses
    - FeatureNameListResponse for array responses
    - FeatureNameOperationResponse for operation confirmations
    - FeatureNameStatsResponse for statistics

VALIDATION PATTERNS
-------------------

[ ] Input validation in controllers
    - Use validation service methods: this.validationService.validateCreateCommand(body)
    - Parameter validation: const validatedId = FeatureNameIdSchema.parse(id)
    - Combined validation for update operations: { ...body, id }

[ ] Validation service structure
    - Individual validation services for each command type
    - Composite facade service combining all validations
    - Safe validation methods for non-throwing validation
    - Proper DI registration for all validation services

CQRS IMPLEMENTATION
------------------

[ ] Separate command and query responsibilities
    - Command use cases for mutations (Create, Update, Delete)
    - Query handlers for data retrieval (Get, List, Search, Stats)
    - Different response types for commands vs queries
    - No business logic mixing between commands and queries

[ ] Use case structure
    - Single execute() method per use case
    - Domain validation before persistence
    - Repository calls for data operations
    - Return domain entities (not DTOs)

DATABASE INTEGRATION
--------------------

[ ] Support multiple database implementations
    - In-memory for testing
    - SQLite with native SQL
    - TypeORM for PostgreSQL/MySQL/SQLite
    - Mongoose for MongoDB
    - Consistent interface adherence across all implementations

[ ] Repository implementation factory
    - Dynamic repository selection based on configuration
    - Proper connection management
    - Database-specific optimizations

DEPENDENCY INJECTION CONFIGURATION
----------------------------------

[ ] Register all dependencies in container
    - Infrastructure layer: repositories, database connections
    - Application layer: use cases, query handlers, validation services
    - Domain layer: domain services (as singletons)
    - Follow existing registration patterns in container.ts

[ ] Use centralized TOKENS
    - All tokens in single TOKENS object
    - Consistent naming: CreateFeatureNameUseCase, FeatureNameRepository
    - No separate token objects or manual Symbol creation

QUALITY ASSURANCE
-----------------

[ ] Code Quality
    - TypeScript strict mode enabled
    - No ESLint warnings
    - Prettier formatting applied
    - No 'any' types used

[ ] Architecture Compliance
    - Dependencies flow inward (Clean Architecture)
    - No cross-layer violations
    - Interfaces used for external dependencies
    - SOLID principles applied

[ ] Pattern Consistency
    - Follow exact TodoController patterns
    - Same validation approach as existing features
    - Consistent error handling delegation
    - Matching repository patterns

[ ] Security
    - Input validation on all endpoints
    - Proper authentication/authorization
    - No sensitive data in responses
    - SQL injection prevention

IMPLEMENTATION PHASES
--------------------

Phase 1: Domain Layer
1. Create entity with business logic
2. Create value objects with validation
3. Define repository interface
4. Create domain exceptions

Phase 2: Application Layer
1. Create use cases for commands
2. Create query handlers
3. Define DTOs and validation schemas
4. Implement validation services
5. Create mappers

Phase 3: Infrastructure Layer
1. Implement repository for multiple databases
2. Create database entities/schemas
3. Configure DI container

Phase 4: Presentation Layer
1. Create controller following TodoController pattern
2. Implement RESTful endpoints
3. Ensure proper error handling delegation

Phase 5: Integration & Quality
1. Test all endpoints
2. Verify error handling
3. Check database implementations
4. Validate architectural compliance

REFERENCE EXAMPLES
------------------

Todo Feature (Most Accurate Reference):
- Controller: apps/api/src/presentation/controllers/TodoController.ts
- Use Case: libs/application-shared/src/use-cases/commands/CreateTodoUseCase.ts
- Validation: libs/application-shared/src/validation/TodoValidationService.ts
- Repository: apps/api/src/infrastructure/todo/persistence/typeorm/TypeOrmTodoRepository.ts
- Mapper: libs/application-shared/src/mappers/TodoMapper.ts
- Domain: libs/domain/src/entities/Todo.ts

Auth Feature:
- Controller: apps/api/src/presentation/controllers/AuthController.ts
- Use Cases: libs/application-api/src/use-cases/commands/RegisterUserUseCase.ts
- Validation: libs/application-shared/src/validation/UserValidationService.ts

Error Handling:
- Middleware: apps/api/src/shared/middleware/RoutingControllersErrorHandler.ts
- ApiResponse: apps/api/src/presentation/dto/ApiResponse.ts

DI Configuration:
- Container: apps/api/src/infrastructure/di/container.ts
- Tokens: libs/application-shared/src/di/tokens.ts

CODE REVIEW CHECKLIST
---------------------

[ ] Does the controller follow TodoController pattern exactly?
[ ] Is error handling completely delegated to middleware?
[ ] Are validation errors properly structured with Zod details?
[ ] Are business rule violations using domain exceptions?
[ ] Is DI configuration using centralized TOKENS?
[ ] Does implementation support all configured database types?
[ ] Are use cases following single responsibility principle?
[ ] Is CQRS pattern properly implemented?
[ ] Are all dependencies properly injected via constructor?
[ ] Does the feature maintain Clean Architecture layer separation?